"use strict";
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["vendors-node_modules_retrolab_notebook-extension_lib_index_js"],{

/***/ 67505:
/*!*****************************************************************!*\
  !*** ../node_modules/@retrolab/notebook-extension/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ 62426);
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/coreutils */ 79615);
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/docmanager */ 95392);
/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/mainmenu */ 69504);
/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/notebook */ 57324);
/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jupyterlab/settingregistry */ 66006);
/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jupyterlab/translation */ 89180);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _retrolab_application__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @retrolab/application */ 95191);
/* harmony import */ var _retrolab_application__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_retrolab_application__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _lumino_polling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lumino/polling */ 61313);
/* harmony import */ var _lumino_polling__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_lumino_polling__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lumino/widgets */ 60150);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_9__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.










/**
 * The class for kernel status errors.
 */
const KERNEL_STATUS_ERROR_CLASS = 'jp-RetroKernelStatus-error';
/**
 * The class for kernel status warnings.
 */
const KERNEL_STATUS_WARN_CLASS = 'jp-RetroKernelStatus-warn';
/**
 * The class for kernel status infos.
 */
const KERNEL_STATUS_INFO_CLASS = 'jp-RetroKernelStatus-info';
/**
 * The class to fade out the kernel status.
 */
const KERNEL_STATUS_FADE_OUT_CLASS = 'jp-RetroKernelStatus-fade';
/**
 * The class for scrolled outputs
 */
const SCROLLED_OUTPUTS_CLASS = 'jp-mod-outputsScrolled';
/**
 * A plugin for the checkpoint indicator
 */
const checkpoints = {
    id: '@retrolab/notebook-extension:checkpoints',
    autoStart: true,
    requires: [_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_2__.IDocumentManager, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],
    optional: [_retrolab_application__WEBPACK_IMPORTED_MODULE_7__.IRetroShell],
    activate: (app, docManager, translator, retroShell) => {
        const { shell } = app;
        const trans = translator.load('retrolab');
        const widget = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Widget();
        widget.id = _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.DOMUtils.createDomID();
        widget.addClass('jp-RetroCheckpoint');
        app.shell.add(widget, 'top', { rank: 100 });
        const onChange = async () => {
            const current = shell.currentWidget;
            if (!current) {
                return;
            }
            const context = docManager.contextForWidget(current);
            context === null || context === void 0 ? void 0 : context.fileChanged.disconnect(onChange);
            context === null || context === void 0 ? void 0 : context.fileChanged.connect(onChange);
            const checkpoints = await (context === null || context === void 0 ? void 0 : context.listCheckpoints());
            if (!checkpoints) {
                return;
            }
            const checkpoint = checkpoints[checkpoints.length - 1];
            widget.node.textContent = trans.__('Last Checkpoint: %1', _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.Time.formatHuman(new Date(checkpoint.last_modified)));
        };
        if (retroShell) {
            retroShell.currentChanged.connect(onChange);
        }
        new _lumino_polling__WEBPACK_IMPORTED_MODULE_8__.Poll({
            auto: true,
            factory: () => onChange(),
            frequency: {
                interval: 2000,
                backoff: false
            },
            standby: 'when-hidden'
        });
    }
};
/**
 * The kernel logo plugin.
 */
const kernelLogo = {
    id: '@retrolab/notebook-extension:kernel-logo',
    autoStart: true,
    requires: [_retrolab_application__WEBPACK_IMPORTED_MODULE_7__.IRetroShell],
    activate: (app, shell) => {
        const { serviceManager } = app;
        let widget;
        const onChange = async () => {
            var _a, _b, _c, _d, _e;
            if (widget) {
                widget.dispose();
                widget.parent = null;
            }
            const current = shell.currentWidget;
            if (!(current instanceof _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.NotebookPanel)) {
                return;
            }
            await current.sessionContext.ready;
            current.sessionContext.kernelChanged.disconnect(onChange);
            current.sessionContext.kernelChanged.connect(onChange);
            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';
            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];
            if (!spec) {
                return;
            }
            const kernelIconUrl = spec.resources['logo-64x64'];
            if (!kernelIconUrl) {
                return;
            }
            const node = document.createElement('div');
            const img = document.createElement('img');
            img.src = kernelIconUrl;
            img.title = spec.display_name;
            node.appendChild(img);
            widget = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Widget({ node });
            widget.addClass('jp-RetroKernelLogo');
            app.shell.add(widget, 'top', { rank: 10010 });
        };
        app.started.then(() => {
            shell.currentChanged.connect(onChange);
        });
    }
};
/**
 * A plugin to display the kernel status;
 */
const kernelStatus = {
    id: '@retrolab/notebook-extension:kernel-status',
    autoStart: true,
    requires: [_retrolab_application__WEBPACK_IMPORTED_MODULE_7__.IRetroShell, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],
    activate: (app, shell, translator) => {
        const trans = translator.load('retrolab');
        const widget = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Widget();
        widget.addClass('jp-RetroKernelStatus');
        app.shell.add(widget, 'menu', { rank: 10010 });
        const removeClasses = () => {
            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);
            widget.removeClass(KERNEL_STATUS_WARN_CLASS);
            widget.removeClass(KERNEL_STATUS_INFO_CLASS);
            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);
        };
        const onStatusChanged = (sessionContext) => {
            const status = sessionContext.kernelDisplayStatus;
            let text = `Kernel ${_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_1__.Text.titleCase(status)}`;
            removeClasses();
            switch (status) {
                case 'busy':
                case 'idle':
                    text = '';
                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);
                    break;
                case 'dead':
                case 'terminating':
                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);
                    break;
                case 'unknown':
                    widget.addClass(KERNEL_STATUS_WARN_CLASS);
                    break;
                default:
                    widget.addClass(KERNEL_STATUS_INFO_CLASS);
                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);
                    break;
            }
            widget.node.textContent = trans.__(text);
        };
        const onChange = async () => {
            const current = shell.currentWidget;
            if (!(current instanceof _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.NotebookPanel)) {
                return;
            }
            const sessionContext = current.sessionContext;
            sessionContext.statusChanged.connect(onStatusChanged);
        };
        shell.currentChanged.connect(onChange);
    }
};
/**
 * A plugin to customize notebook related menu entries
 * TODO: switch to settings define menus when fixed upstream: https://github.com/jupyterlab/jupyterlab/issues/11754
 */
const menuPlugin = {
    id: '@retrolab/notebook-extension:menu-plugin',
    autoStart: true,
    requires: [_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_3__.IMainMenu, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_6__.ITranslator],
    activate: (app, mainMenu, translator) => {
        const { commands } = app;
        const trans = translator.load('retrolab');
        const cellTypeSubmenu = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_9__.Menu({ commands });
        cellTypeSubmenu.title.label = trans._p('menu', 'Cell Type');
        [
            'notebook:change-cell-to-code',
            'notebook:change-cell-to-markdown',
            'notebook:change-cell-to-raw'
        ].forEach(command => {
            cellTypeSubmenu.addItem({
                command
            });
        });
        mainMenu.runMenu.addItem({ type: 'separator', rank: 1000 });
        mainMenu.runMenu.addItem({
            type: 'submenu',
            submenu: cellTypeSubmenu,
            rank: 1010
        });
    }
};
/**
 * A plugin to add an extra shortcut to execute a cell in place via Cmd-Enter on Mac.
 * TODO: switch to settings define menus when fixed upstream: https://github.com/jupyterlab/jupyterlab/issues/11754
 */
const runShortcut = {
    id: '@retrolab/notebook-extension:run-shortcut',
    autoStart: true,
    activate: (app) => {
        app.commands.addKeyBinding({
            command: 'notebook:run-cell',
            keys: ['Accel Enter'],
            selector: '.jp-Notebook:focus'
        });
        app.commands.addKeyBinding({
            command: 'notebook:run-cell',
            keys: ['Accel Enter'],
            selector: '.jp-Notebook.jp-mod-editMode'
        });
    }
};
/**
 * A plugin to enable scrolling for outputs by default.
 * Mimic the logic from the classic notebook, as found here:
 * https://github.com/jupyter/notebook/blob/a9a31c096eeffe1bff4e9164c6a0442e0e13cdb3/notebook/static/notebook/js/outputarea.js#L96-L120
 */
const scrollOutput = {
    id: '@retrolab/notebook-extension:scroll-output',
    autoStart: true,
    requires: [_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_4__.INotebookTracker],
    optional: [_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_5__.ISettingRegistry],
    activate: async (app, tracker, settingRegistry) => {
        const autoScrollThreshold = 100;
        let autoScrollOutputs = true;
        // decide whether to scroll the output of the cell based on some heuristics
        const autoScroll = (cell) => {
            if (!autoScrollOutputs) {
                // bail if disabled via the settings
                return;
            }
            const { outputArea } = cell;
            // respect cells with an explicit scrolled state
            const scrolled = cell.model.metadata.get('scrolled');
            if (scrolled !== undefined) {
                return;
            }
            const { node } = outputArea;
            const height = node.scrollHeight;
            const fontSize = parseFloat(node.style.fontSize.replace('px', ''));
            const lineHeight = (fontSize || 14) * 1.3;
            // do not set via cell.outputScrolled = true, as this would
            // otherwise synchronize the scrolled state to the notebook metadata
            const scroll = height > lineHeight * autoScrollThreshold;
            cell.toggleClass(SCROLLED_OUTPUTS_CLASS, scroll);
        };
        tracker.widgetAdded.connect((sender, notebook) => {
            var _a;
            (_a = notebook.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect((sender, changed) => {
                // process new cells only
                if (!(changed.type === 'add')) {
                    return;
                }
                const [cellModel] = changed.newValues;
                notebook.content.widgets.forEach(cell => {
                    if (cell.model.id === cellModel.id && cell.model.type === 'code') {
                        const codeCell = cell;
                        codeCell.outputArea.model.changed.connect(() => autoScroll(codeCell));
                    }
                });
            });
            // when the notebook widget is created, process all the cells
            // TODO: investigate why notebook.content.fullyRendered is not enough
            notebook.sessionContext.ready.then(() => {
                notebook.content.widgets.forEach(cell => {
                    if (cell.model.type === 'code') {
                        autoScroll(cell);
                    }
                });
            });
        });
        if (settingRegistry) {
            const loadSettings = settingRegistry.load(scrollOutput.id);
            const updateSettings = (settings) => {
                autoScrollOutputs = settings.get('autoScrollOutputs')
                    .composite;
            };
            Promise.all([loadSettings, app.restored])
                .then(([settings]) => {
                updateSettings(settings);
                settings.changed.connect(settings => {
                    updateSettings(settings);
                });
            })
                .catch((reason) => {
                console.error(reason.message);
            });
        }
    }
};
/**
 * Export the plugins as default.
 */
const plugins = [
    checkpoints,
    kernelLogo,
    kernelStatus,
    menuPlugin,
    runShortcut,
    scrollOutput
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_retrolab_notebook-extension_lib_index_js.09474ae.js.map