{"version":3,"file":"vendors-node_modules_retrolab_notebook-extension_lib_index_js.7ef7926.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACgD;AACG;AACO;AACT;AACsB;AACR;AACT;AACF;AACb;AACQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAgB,EAAE,gEAAW;AAC5C,eAAe,8DAAW;AAC1B;AACA,gBAAgB,QAAQ;AACxB;AACA,2BAA2B,mDAAM;AACjC,oBAAoB,sEAAoB;AACxC;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,mEAAgB;AACtF;AACA;AACA;AACA;AACA,YAAY,iDAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+DAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAM,GAAG,MAAM;AACxC;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW,EAAE,gEAAW;AACvC;AACA;AACA,2BAA2B,mDAAM;AACjC;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iEAAc,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+DAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,gEAAW;AACrC;AACA,gBAAgB,WAAW;AAC3B;AACA,oCAAoC,iDAAI,GAAG,UAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,mCAAmC,+BAA+B;AAClE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils } from '@jupyterlab/apputils';\nimport { Text, Time } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { NotebookPanel, INotebookTracker } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { IRetroShell } from '@retrolab/application';\nimport { Poll } from '@lumino/polling';\nimport { Menu, Widget } from '@lumino/widgets';\n/**\n * The class for kernel status errors.\n */\nconst KERNEL_STATUS_ERROR_CLASS = 'jp-RetroKernelStatus-error';\n/**\n * The class for kernel status warnings.\n */\nconst KERNEL_STATUS_WARN_CLASS = 'jp-RetroKernelStatus-warn';\n/**\n * The class for kernel status infos.\n */\nconst KERNEL_STATUS_INFO_CLASS = 'jp-RetroKernelStatus-info';\n/**\n * The class to fade out the kernel status.\n */\nconst KERNEL_STATUS_FADE_OUT_CLASS = 'jp-RetroKernelStatus-fade';\n/**\n * The class for scrolled outputs\n */\nconst SCROLLED_OUTPUTS_CLASS = 'jp-mod-outputsScrolled';\n/**\n * A plugin for the checkpoint indicator\n */\nconst checkpoints = {\n    id: '@retrolab/notebook-extension:checkpoints',\n    autoStart: true,\n    requires: [IDocumentManager, ITranslator],\n    optional: [IRetroShell],\n    activate: (app, docManager, translator, retroShell) => {\n        const { shell } = app;\n        const trans = translator.load('retrolab');\n        const widget = new Widget();\n        widget.id = DOMUtils.createDomID();\n        widget.addClass('jp-RetroCheckpoint');\n        app.shell.add(widget, 'top', { rank: 100 });\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!current) {\n                return;\n            }\n            const context = docManager.contextForWidget(current);\n            context === null || context === void 0 ? void 0 : context.fileChanged.disconnect(onChange);\n            context === null || context === void 0 ? void 0 : context.fileChanged.connect(onChange);\n            const checkpoints = await (context === null || context === void 0 ? void 0 : context.listCheckpoints());\n            if (!checkpoints) {\n                return;\n            }\n            const checkpoint = checkpoints[checkpoints.length - 1];\n            widget.node.textContent = trans.__('Last Checkpoint: %1', Time.formatHuman(new Date(checkpoint.last_modified)));\n        };\n        if (retroShell) {\n            retroShell.currentChanged.connect(onChange);\n        }\n        new Poll({\n            auto: true,\n            factory: () => onChange(),\n            frequency: {\n                interval: 2000,\n                backoff: false\n            },\n            standby: 'when-hidden'\n        });\n    }\n};\n/**\n * The kernel logo plugin.\n */\nconst kernelLogo = {\n    id: '@retrolab/notebook-extension:kernel-logo',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const { serviceManager } = app;\n        let widget;\n        const onChange = async () => {\n            var _a, _b, _c, _d, _e;\n            if (widget) {\n                widget.dispose();\n                widget.parent = null;\n            }\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            await current.sessionContext.ready;\n            current.sessionContext.kernelChanged.disconnect(onChange);\n            current.sessionContext.kernelChanged.connect(onChange);\n            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];\n            if (!spec) {\n                return;\n            }\n            const kernelIconUrl = spec.resources['logo-64x64'];\n            if (!kernelIconUrl) {\n                return;\n            }\n            const node = document.createElement('div');\n            const img = document.createElement('img');\n            img.src = kernelIconUrl;\n            img.title = spec.display_name;\n            node.appendChild(img);\n            widget = new Widget({ node });\n            widget.addClass('jp-RetroKernelLogo');\n            app.shell.add(widget, 'top', { rank: 10010 });\n        };\n        app.started.then(() => {\n            shell.currentChanged.connect(onChange);\n        });\n    }\n};\n/**\n * A plugin to display the kernel status;\n */\nconst kernelStatus = {\n    id: '@retrolab/notebook-extension:kernel-status',\n    autoStart: true,\n    requires: [IRetroShell, ITranslator],\n    activate: (app, shell, translator) => {\n        const trans = translator.load('retrolab');\n        const widget = new Widget();\n        widget.addClass('jp-RetroKernelStatus');\n        app.shell.add(widget, 'menu', { rank: 10010 });\n        const removeClasses = () => {\n            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);\n            widget.removeClass(KERNEL_STATUS_WARN_CLASS);\n            widget.removeClass(KERNEL_STATUS_INFO_CLASS);\n            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);\n        };\n        const onStatusChanged = (sessionContext) => {\n            const status = sessionContext.kernelDisplayStatus;\n            let text = `Kernel ${Text.titleCase(status)}`;\n            removeClasses();\n            switch (status) {\n                case 'busy':\n                case 'idle':\n                    text = '';\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n                case 'dead':\n                case 'terminating':\n                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);\n                    break;\n                case 'unknown':\n                    widget.addClass(KERNEL_STATUS_WARN_CLASS);\n                    break;\n                default:\n                    widget.addClass(KERNEL_STATUS_INFO_CLASS);\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n            }\n            widget.node.textContent = trans.__(text);\n        };\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const sessionContext = current.sessionContext;\n            sessionContext.statusChanged.connect(onStatusChanged);\n        };\n        shell.currentChanged.connect(onChange);\n    }\n};\n/**\n * A plugin to customize notebook related menu entries\n * TODO: switch to settings define menus when fixed upstream: https://github.com/jupyterlab/jupyterlab/issues/11754\n */\nconst menuPlugin = {\n    id: '@retrolab/notebook-extension:menu-plugin',\n    autoStart: true,\n    requires: [IMainMenu, ITranslator],\n    activate: (app, mainMenu, translator) => {\n        const { commands } = app;\n        const trans = translator.load('retrolab');\n        const cellTypeSubmenu = new Menu({ commands });\n        cellTypeSubmenu.title.label = trans._p('menu', 'Cell Type');\n        [\n            'notebook:change-cell-to-code',\n            'notebook:change-cell-to-markdown',\n            'notebook:change-cell-to-raw'\n        ].forEach(command => {\n            cellTypeSubmenu.addItem({\n                command\n            });\n        });\n        mainMenu.runMenu.addItem({ type: 'separator', rank: 1000 });\n        mainMenu.runMenu.addItem({\n            type: 'submenu',\n            submenu: cellTypeSubmenu,\n            rank: 1010\n        });\n    }\n};\n/**\n * A plugin to add an extra shortcut to execute a cell in place via Cmd-Enter on Mac.\n * TODO: switch to settings define menus when fixed upstream: https://github.com/jupyterlab/jupyterlab/issues/11754\n */\nconst runShortcut = {\n    id: '@retrolab/notebook-extension:run-shortcut',\n    autoStart: true,\n    activate: (app) => {\n        app.commands.addKeyBinding({\n            command: 'notebook:run-cell',\n            keys: ['Accel Enter'],\n            selector: '.jp-Notebook:focus'\n        });\n        app.commands.addKeyBinding({\n            command: 'notebook:run-cell',\n            keys: ['Accel Enter'],\n            selector: '.jp-Notebook.jp-mod-editMode'\n        });\n    }\n};\n/**\n * A plugin to enable scrolling for outputs by default.\n * Mimic the logic from the classic notebook, as found here:\n * https://github.com/jupyter/notebook/blob/a9a31c096eeffe1bff4e9164c6a0442e0e13cdb3/notebook/static/notebook/js/outputarea.js#L96-L120\n */\nconst scrollOutput = {\n    id: '@retrolab/notebook-extension:scroll-output',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ISettingRegistry],\n    activate: async (app, tracker, settingRegistry) => {\n        const autoScrollThreshold = 100;\n        let autoScrollOutputs = true;\n        // decide whether to scroll the output of the cell based on some heuristics\n        const autoScroll = (cell) => {\n            if (!autoScrollOutputs) {\n                // bail if disabled via the settings\n                return;\n            }\n            const { outputArea } = cell;\n            // respect cells with an explicit scrolled state\n            const scrolled = cell.model.metadata.get('scrolled');\n            if (scrolled !== undefined) {\n                return;\n            }\n            const { node } = outputArea;\n            const height = node.scrollHeight;\n            const fontSize = parseFloat(node.style.fontSize.replace('px', ''));\n            const lineHeight = (fontSize || 14) * 1.3;\n            // do not set via cell.outputScrolled = true, as this would\n            // otherwise synchronize the scrolled state to the notebook metadata\n            const scroll = height > lineHeight * autoScrollThreshold;\n            cell.toggleClass(SCROLLED_OUTPUTS_CLASS, scroll);\n        };\n        tracker.widgetAdded.connect((sender, notebook) => {\n            var _a;\n            (_a = notebook.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect((sender, changed) => {\n                // process new cells only\n                if (!(changed.type === 'add')) {\n                    return;\n                }\n                const [cellModel] = changed.newValues;\n                notebook.content.widgets.forEach(cell => {\n                    if (cell.model.id === cellModel.id && cell.model.type === 'code') {\n                        const codeCell = cell;\n                        codeCell.outputArea.model.changed.connect(() => autoScroll(codeCell));\n                    }\n                });\n            });\n            // when the notebook widget is created, process all the cells\n            // TODO: investigate why notebook.content.fullyRendered is not enough\n            notebook.sessionContext.ready.then(() => {\n                notebook.content.widgets.forEach(cell => {\n                    if (cell.model.type === 'code') {\n                        autoScroll(cell);\n                    }\n                });\n            });\n        });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(scrollOutput.id);\n            const updateSettings = (settings) => {\n                autoScrollOutputs = settings.get('autoScrollOutputs')\n                    .composite;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(settings => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    checkpoints,\n    kernelLogo,\n    kernelStatus,\n    menuPlugin,\n    runShortcut,\n    scrollOutput\n];\nexport default plugins;\n"],"names":[],"sourceRoot":""}