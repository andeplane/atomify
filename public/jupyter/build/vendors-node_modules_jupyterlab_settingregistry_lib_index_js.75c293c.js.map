{"version":3,"file":"vendors-node_modules_jupyterlab_settingregistry_lib_index_js.75c293c.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AACT;AACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACmD;AACP;AACY;AACb;AACrB;AACS;AACW;AAC1C;AACA;AACA;AACA,aAAa,+DAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,6BAA6B,4CAAG,GAAG,mBAAmB;AACtD,8BAA8B,4CAAG;AACjC,iCAAiC,4DAAM;AACvC,kCAAkC,4DAAM;AACxC;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE,0BAA0B,oDAAoD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wCAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa,QAAQ,MAAM,SAAS,OAAO;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAM;AAC5B;AACA;AACA;AACA;AACA,kCAAkC,qDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,kCAAkC,mCAAmC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,6DAA6D,OAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mCAAmC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAW;AAC/B;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAW;AAC/B,qGAAqG,UAAU,cAAc;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA,wBAAwB,yCAAyC;AACjE;AACA,mCAAmC,OAAO,aAAa,WAAW,WAAW,SAAS;AACtF;AACA,8BAA8B,EAAE,UAAU,EAAE,QAAQ;AACpD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC,+BAA+B,QAAQ,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,OAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,4BAA4B,qDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAiB,QAAQ,kEAAmB;AAC5D,gBAAgB,gEAAiB,QAAQ,iEAAkB;AAC3D;AACA;AACA,iBAAiB,gEAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC,gBAAgB,aAAa;AAC7B;AACA;AACA,wCAAwC,gCAAgC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+DAAgB;AAC7D;AACA;AACA,mBAAmB,+DAAgB;AACnC;AACA,uBAAuB,+DAAgB;AACvC;AACA;AACA;AACA,+EAA+E,8BAA8B,8EAA8E;AAC3L;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,8BAA8B,+DAAgB;AAC9C;AACA;AACA,mBAAmB,+DAAgB;AACnC;AACA,sBAAsB,+DAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,kEAAkE,YAAY,wKAAwK;AACtP;AACA;AACA,2CAA2C,+DAAgB;AAC3D;AACA;AACA;AACA,0FAA0F,6BAA6B;AACvH;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gEAAiB,oDAAoD,sDAAsD;AAC3J,yBAAyB;AACzB;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,wEAAwE,aAAa;AACrF;AACA,4EAA4E;AAC5E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,4BAA4B,UAAU;AACtC;AACA,qEAAqE,cAAc,sFAAsF;AACzK;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2EAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2EAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,8BAA8B,+DAAgB;AAC9C;AACA;AACA,mBAAmB,+DAAgB;AACnC;AACA,sBAAsB,+DAAgB;AACtC;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,oBAAoB,gEAAiB;AACrC,kDAAkD,UAAU;AAC5D;AACA,gEAAgE;AAChE;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iCAAiC;AACjD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA,cAAc;AACd,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI,KAAK,sCAAsC;AACxE,yBAAyB,IAAI,KAAK,KAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI,KAAK,oCAAoC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C,kDAAkD,IAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B;;;;;;;;;;;;;;;;;ACjgCA;AACA;AACA;AACA;AAC0C;AAC1C;AACA;AACA;AACA;AACO,6BAA6B,oDAAK;AACzC;;;;;;;;;;ACVA,kBAAkB,qPAAqP,oCAAoC,8BAA8B,aAAa,wBAAwB,+BAA+B,WAAW,gCAAgC,sBAAsB,8BAA8B,QAAQ,oGAAoG,4BAA4B,6BAA6B,YAAY,6FAA6F,UAAU,gCAAgC,EAAE,cAAc,YAAY,8EAA8E,EAAE,8BAA8B,8BAA8B,mCAAmC,iCAAiC,6BAA6B,6BAA6B,mCAAmC,6BAA6B,mCAAmC,mCAAmC,0BAA0B,SAAS,gCAAgC,6BAA6B,yBAAyB,cAAc,mBAAmB,SAAS,mCAAmC,8BAA8B,8BAA8B,0BAA0B,kCAAkC,gBAAgB,QAAQ,cAAc,YAAY,qFAAqF,SAAS,6CAA6C,OAAO,yCAAyC,yKAAyK,EAAE,+CAA+C,EAAE,UAAU,mDAAmD,iCAAiC,UAAU,2CAA2C,aAAa,uFAAuF,SAAS,uDAAuD,mCAAmC,aAAa,cAAc,QAAQ,kDAAkD,YAAY,2CAA2C,aAAa,qFAAqF,SAAS,uGAAuG,SAAS,sDAAsD,YAAY,UAAU,4BAA4B,EAAE,cAAc,GAAG,iBAAiB,aAAa,cAAc,QAAQ,wDAAwD,YAAY,2GAA2G,aAAa,2FAA2F,SAAS,gKAAgK,gBAAgB,gBAAgB,YAAY,qKAAqK,gBAAgB,gBAAgB,YAAY,yKAAyK,gBAAgB,gBAAgB,cAAc,uKAAuK,gBAAgB,gBAAgB,aAAa,wCAAwC,0DAA0D,gBAAgB,cAAc,QAAQ,sCAAsC,SAAS,4CAA4C,YAAY,kDAAkD,aAAa,8EAA8E,SAAS,qGAAqG,UAAU,oGAAoG,SAAS,gEAAgE,SAAS,8DAA8D","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingregistry/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingregistry/lib/settingregistry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingregistry/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingregistry/lib/plugin-schema.json"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module settingregistry\n */\nexport * from './settingregistry';\nexport * from './tokens';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandRegistry } from '@lumino/commands';\nimport { JSONExt } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport Ajv from 'ajv';\nimport * as json5 from 'json5';\nimport SCHEMA from './plugin-schema.json';\n/**\n * An alias for the JSON deep copy function.\n */\nconst copy = JSONExt.deepCopy;\n/**\n * The default number of milliseconds before a `load()` call to the registry\n * will wait before timing out if it requires a transformation that has not been\n * registered.\n */\nconst DEFAULT_TRANSFORM_TIMEOUT = 1000;\n/**\n * The ASCII record separator character.\n */\nconst RECORD_SEPARATOR = String.fromCharCode(30);\n/**\n * The default implementation of a schema validator.\n */\nexport class DefaultSchemaValidator {\n    /**\n     * Instantiate a schema validator.\n     */\n    constructor() {\n        this._composer = new Ajv({ useDefaults: true });\n        this._validator = new Ajv();\n        this._composer.addSchema(SCHEMA, 'jupyterlab-plugin-schema');\n        this._validator.addSchema(SCHEMA, 'jupyterlab-plugin-schema');\n    }\n    /**\n     * Validate a plugin's schema and user data; populate the `composite` data.\n     *\n     * @param plugin - The plugin being validated. Its `composite` data will be\n     * populated by reference.\n     *\n     * @param populate - Whether plugin data should be populated, defaults to\n     * `true`.\n     *\n     * @return A list of errors if either the schema or data fail to validate or\n     * `null` if there are no errors.\n     */\n    validateData(plugin, populate = true) {\n        const validate = this._validator.getSchema(plugin.id);\n        const compose = this._composer.getSchema(plugin.id);\n        // If the schemas do not exist, add them to the validator and continue.\n        if (!validate || !compose) {\n            if (plugin.schema.type !== 'object') {\n                const keyword = 'schema';\n                const message = `Setting registry schemas' root-level type must be ` +\n                    `'object', rejecting type: ${plugin.schema.type}`;\n                return [{ dataPath: 'type', keyword, schemaPath: '', message }];\n            }\n            const errors = this._addSchema(plugin.id, plugin.schema);\n            return errors || this.validateData(plugin);\n        }\n        // Parse the raw commented JSON into a user map.\n        let user;\n        try {\n            user = json5.parse(plugin.raw);\n        }\n        catch (error) {\n            if (error instanceof SyntaxError) {\n                return [\n                    {\n                        dataPath: '',\n                        keyword: 'syntax',\n                        schemaPath: '',\n                        message: error.message\n                    }\n                ];\n            }\n            const { column, description } = error;\n            const line = error.lineNumber;\n            return [\n                {\n                    dataPath: '',\n                    keyword: 'parse',\n                    schemaPath: '',\n                    message: `${description} (line ${line} column ${column})`\n                }\n            ];\n        }\n        if (!validate(user)) {\n            return validate.errors;\n        }\n        // Copy the user data before merging defaults into composite map.\n        const composite = copy(user);\n        if (!compose(composite)) {\n            return compose.errors;\n        }\n        if (populate) {\n            plugin.data = { composite, user };\n        }\n        return null;\n    }\n    /**\n     * Add a schema to the validator.\n     *\n     * @param plugin - The plugin ID.\n     *\n     * @param schema - The schema being added.\n     *\n     * @return A list of errors if the schema fails to validate or `null` if there\n     * are no errors.\n     *\n     * #### Notes\n     * It is safe to call this function multiple times with the same plugin name.\n     */\n    _addSchema(plugin, schema) {\n        const composer = this._composer;\n        const validator = this._validator;\n        const validate = validator.getSchema('jupyterlab-plugin-schema');\n        // Validate against the main schema.\n        if (!validate(schema)) {\n            return validate.errors;\n        }\n        // Validate against the JSON schema meta-schema.\n        if (!validator.validateSchema(schema)) {\n            return validator.errors;\n        }\n        // Remove if schema already exists.\n        composer.removeSchema(plugin);\n        validator.removeSchema(plugin);\n        // Add schema to the validator and composer.\n        composer.addSchema(schema, plugin);\n        validator.addSchema(schema, plugin);\n        return null;\n    }\n}\n/**\n * The default concrete implementation of a setting registry.\n */\nexport class SettingRegistry {\n    /**\n     * Create a new setting registry.\n     */\n    constructor(options) {\n        /**\n         * The schema of the setting registry.\n         */\n        this.schema = SCHEMA;\n        /**\n         * The collection of setting registry plugins.\n         */\n        this.plugins = Object.create(null);\n        this._pluginChanged = new Signal(this);\n        this._ready = Promise.resolve();\n        this._transformers = Object.create(null);\n        this.connector = options.connector;\n        this.validator = options.validator || new DefaultSchemaValidator();\n        this._timeout = options.timeout || DEFAULT_TRANSFORM_TIMEOUT;\n        // Preload with any available data at instantiation-time.\n        if (options.plugins) {\n            this._ready = this._preload(options.plugins);\n        }\n    }\n    /**\n     * A signal that emits the name of a plugin when its settings change.\n     */\n    get pluginChanged() {\n        return this._pluginChanged;\n    }\n    /**\n     * Get an individual setting.\n     *\n     * @param plugin - The name of the plugin whose settings are being retrieved.\n     *\n     * @param key - The name of the setting being retrieved.\n     *\n     * @returns A promise that resolves when the setting is retrieved.\n     */\n    async get(plugin, key) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (plugin in plugins) {\n            const { composite, user } = plugins[plugin].data;\n            return {\n                composite: composite[key] !== undefined ? copy(composite[key]) : undefined,\n                user: user[key] !== undefined ? copy(user[key]) : undefined\n            };\n        }\n        return this.load(plugin).then(() => this.get(plugin, key));\n    }\n    /**\n     * Load a plugin's settings into the setting registry.\n     *\n     * @param plugin - The name of the plugin whose settings are being loaded.\n     *\n     * @returns A promise that resolves with a plugin settings object or rejects\n     * if the plugin is not found.\n     */\n    async load(plugin) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        const registry = this; // eslint-disable-line\n        // If the plugin exists, resolve.\n        if (plugin in plugins) {\n            return new Settings({ plugin: plugins[plugin], registry });\n        }\n        // If the plugin needs to be loaded from the data connector, fetch.\n        return this.reload(plugin);\n    }\n    /**\n     * Reload a plugin's settings into the registry even if they already exist.\n     *\n     * @param plugin - The name of the plugin whose settings are being reloaded.\n     *\n     * @returns A promise that resolves with a plugin settings object or rejects\n     * with a list of `ISchemaValidator.IError` objects if it fails.\n     */\n    async reload(plugin) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const fetched = await this.connector.fetch(plugin);\n        const plugins = this.plugins; // eslint-disable-line\n        const registry = this; // eslint-disable-line\n        if (fetched === undefined) {\n            throw [\n                {\n                    dataPath: '',\n                    keyword: 'id',\n                    message: `Could not fetch settings for ${plugin}.`,\n                    schemaPath: ''\n                }\n            ];\n        }\n        await this._load(await this._transform('fetch', fetched));\n        this._pluginChanged.emit(plugin);\n        return new Settings({ plugin: plugins[plugin], registry });\n    }\n    /**\n     * Remove a single setting in the registry.\n     *\n     * @param plugin - The name of the plugin whose setting is being removed.\n     *\n     * @param key - The name of the setting being removed.\n     *\n     * @returns A promise that resolves when the setting is removed.\n     */\n    async remove(plugin, key) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            return;\n        }\n        const raw = json5.parse(plugins[plugin].raw);\n        // Delete both the value and any associated comment.\n        delete raw[key];\n        delete raw[`// ${key}`];\n        plugins[plugin].raw = Private.annotatedPlugin(plugins[plugin], raw);\n        return this._save(plugin);\n    }\n    /**\n     * Set a single setting in the registry.\n     *\n     * @param plugin - The name of the plugin whose setting is being set.\n     *\n     * @param key - The name of the setting being set.\n     *\n     * @param value - The value of the setting being set.\n     *\n     * @returns A promise that resolves when the setting has been saved.\n     *\n     */\n    async set(plugin, key, value) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            return this.load(plugin).then(() => this.set(plugin, key, value));\n        }\n        // Parse the raw JSON string removing all comments and return an object.\n        const raw = json5.parse(plugins[plugin].raw);\n        plugins[plugin].raw = Private.annotatedPlugin(plugins[plugin], Object.assign(Object.assign({}, raw), { [key]: value }));\n        return this._save(plugin);\n    }\n    /**\n     * Register a plugin transform function to act on a specific plugin.\n     *\n     * @param plugin - The name of the plugin whose settings are transformed.\n     *\n     * @param transforms - The transform functions applied to the plugin.\n     *\n     * @returns A disposable that removes the transforms from the registry.\n     *\n     * #### Notes\n     * - `compose` transformations: The registry automatically overwrites a\n     * plugin's default values with user overrides, but a plugin may instead wish\n     * to merge values. This behavior can be accomplished in a `compose`\n     * transformation.\n     * - `fetch` transformations: The registry uses the plugin data that is\n     * fetched from its connector. If a plugin wants to override, e.g. to update\n     * its schema with dynamic defaults, a `fetch` transformation can be applied.\n     */\n    transform(plugin, transforms) {\n        const transformers = this._transformers;\n        if (plugin in transformers) {\n            const error = new Error(`${plugin} already has a transformer.`);\n            error.name = 'TransformError';\n            throw error;\n        }\n        transformers[plugin] = {\n            fetch: transforms.fetch || (plugin => plugin),\n            compose: transforms.compose || (plugin => plugin)\n        };\n        return new DisposableDelegate(() => {\n            delete transformers[plugin];\n        });\n    }\n    /**\n     * Upload a plugin's settings.\n     *\n     * @param plugin - The name of the plugin whose settings are being set.\n     *\n     * @param raw - The raw plugin settings being uploaded.\n     *\n     * @returns A promise that resolves when the settings have been saved.\n     */\n    async upload(plugin, raw) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            return this.load(plugin).then(() => this.upload(plugin, raw));\n        }\n        // Set the local copy.\n        plugins[plugin].raw = raw;\n        return this._save(plugin);\n    }\n    /**\n     * Load a plugin into the registry.\n     */\n    async _load(data) {\n        const plugin = data.id;\n        // Validate and preload the item.\n        try {\n            await this._validate(data);\n        }\n        catch (errors) {\n            const output = [`Validating ${plugin} failed:`];\n            errors.forEach((error, index) => {\n                const { dataPath, schemaPath, keyword, message } = error;\n                if (dataPath || schemaPath) {\n                    output.push(`${index} - schema @ ${schemaPath}, data @ ${dataPath}`);\n                }\n                output.push(`{${keyword}} ${message}`);\n            });\n            console.warn(output.join('\\n'));\n            throw errors;\n        }\n    }\n    /**\n     * Preload a list of plugins and fail gracefully.\n     */\n    async _preload(plugins) {\n        await Promise.all(plugins.map(async (plugin) => {\n            var _a;\n            try {\n                // Apply a transformation to the plugin if necessary.\n                await this._load(await this._transform('fetch', plugin));\n            }\n            catch (errors) {\n                /* Ignore preload timeout errors silently. */\n                if (((_a = errors[0]) === null || _a === void 0 ? void 0 : _a.keyword) !== 'timeout') {\n                    console.warn('Ignored setting registry preload errors.', errors);\n                }\n            }\n        }));\n    }\n    /**\n     * Save a plugin in the registry.\n     */\n    async _save(plugin) {\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            throw new Error(`${plugin} does not exist in setting registry.`);\n        }\n        try {\n            await this._validate(plugins[plugin]);\n        }\n        catch (errors) {\n            console.warn(`${plugin} validation errors:`, errors);\n            throw new Error(`${plugin} failed to validate; check console.`);\n        }\n        await this.connector.save(plugin, plugins[plugin].raw);\n        // Fetch and reload the data to guarantee server and client are in sync.\n        const fetched = await this.connector.fetch(plugin);\n        if (fetched === undefined) {\n            throw [\n                {\n                    dataPath: '',\n                    keyword: 'id',\n                    message: `Could not fetch settings for ${plugin}.`,\n                    schemaPath: ''\n                }\n            ];\n        }\n        await this._load(await this._transform('fetch', fetched));\n        this._pluginChanged.emit(plugin);\n    }\n    /**\n     * Transform the plugin if necessary.\n     */\n    async _transform(phase, plugin, started = new Date().getTime()) {\n        const elapsed = new Date().getTime() - started;\n        const id = plugin.id;\n        const transformers = this._transformers;\n        const timeout = this._timeout;\n        if (!plugin.schema['jupyter.lab.transform']) {\n            return plugin;\n        }\n        if (id in transformers) {\n            const transformed = transformers[id][phase].call(null, plugin);\n            if (transformed.id !== id) {\n                throw [\n                    {\n                        dataPath: '',\n                        keyword: 'id',\n                        message: 'Plugin transformations cannot change plugin IDs.',\n                        schemaPath: ''\n                    }\n                ];\n            }\n            return transformed;\n        }\n        // If the timeout has not been exceeded, stall and try again in 250ms.\n        if (elapsed < timeout) {\n            await new Promise(resolve => {\n                setTimeout(() => {\n                    resolve();\n                }, 250);\n            });\n            return this._transform(phase, plugin, started);\n        }\n        throw [\n            {\n                dataPath: '',\n                keyword: 'timeout',\n                message: `Transforming ${plugin.id} timed out.`,\n                schemaPath: ''\n            }\n        ];\n    }\n    /**\n     * Validate and preload a plugin, compose the `composite` data.\n     */\n    async _validate(plugin) {\n        // Validate the user data and create the composite data.\n        const errors = this.validator.validateData(plugin);\n        if (errors) {\n            throw errors;\n        }\n        // Apply a transformation if necessary and set the local copy.\n        this.plugins[plugin.id] = await this._transform('compose', plugin);\n    }\n}\n/**\n * A manager for a specific plugin's settings.\n */\nexport class Settings {\n    /**\n     * Instantiate a new plugin settings manager.\n     */\n    constructor(options) {\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this.id = options.plugin.id;\n        this.registry = options.registry;\n        this.registry.pluginChanged.connect(this._onPluginChanged, this);\n    }\n    /**\n     * A signal that emits when the plugin's settings have changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The composite of user settings and extension defaults.\n     */\n    get composite() {\n        return this.plugin.data.composite;\n    }\n    /**\n     * Test whether the plugin settings manager disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    get plugin() {\n        return this.registry.plugins[this.id];\n    }\n    /**\n     * The plugin's schema.\n     */\n    get schema() {\n        return this.plugin.schema;\n    }\n    /**\n     * The plugin settings raw text value.\n     */\n    get raw() {\n        return this.plugin.raw;\n    }\n    /**\n     * Checks if any fields are different from the default value.\n     */\n    isDefault(user) {\n        for (const key in this.schema.properties) {\n            const value = user[key];\n            const defaultValue = this.default(key);\n            if (value === undefined ||\n                defaultValue === undefined ||\n                JSONExt.deepEqual(value, JSONExt.emptyObject) ||\n                JSONExt.deepEqual(value, JSONExt.emptyArray)) {\n                continue;\n            }\n            if (!JSONExt.deepEqual(value, defaultValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    get isModified() {\n        return !this.isDefault(this.user);\n    }\n    /**\n     * The user settings.\n     */\n    get user() {\n        return this.plugin.data.user;\n    }\n    /**\n     * The published version of the NPM package containing these settings.\n     */\n    get version() {\n        return this.plugin.version;\n    }\n    /**\n     * Return the defaults in a commented JSON format.\n     */\n    annotatedDefaults() {\n        return Private.annotatedDefaults(this.schema, this.id);\n    }\n    /**\n     * Calculate the default value of a setting by iterating through the schema.\n     *\n     * @param key - The name of the setting whose default value is calculated.\n     *\n     * @returns A calculated default JSON value for a specific setting.\n     */\n    default(key) {\n        return Private.reifyDefault(this.schema, key);\n    }\n    /**\n     * Dispose of the plugin settings resources.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Get an individual setting.\n     *\n     * @param key - The name of the setting being retrieved.\n     *\n     * @returns The setting value.\n     *\n     * #### Notes\n     * This method returns synchronously because it uses a cached copy of the\n     * plugin settings that is synchronized with the registry.\n     */\n    get(key) {\n        const { composite, user } = this;\n        return {\n            composite: composite[key] !== undefined ? copy(composite[key]) : undefined,\n            user: user[key] !== undefined ? copy(user[key]) : undefined\n        };\n    }\n    /**\n     * Remove a single setting.\n     *\n     * @param key - The name of the setting being removed.\n     *\n     * @returns A promise that resolves when the setting is removed.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    remove(key) {\n        return this.registry.remove(this.plugin.id, key);\n    }\n    /**\n     * Save all of the plugin's user settings at once.\n     */\n    save(raw) {\n        return this.registry.upload(this.plugin.id, raw);\n    }\n    /**\n     * Set a single setting.\n     *\n     * @param key - The name of the setting being set.\n     *\n     * @param value - The value of the setting.\n     *\n     * @returns A promise that resolves when the setting has been saved.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    set(key, value) {\n        return this.registry.set(this.plugin.id, key, value);\n    }\n    /**\n     * Validates raw settings with comments.\n     *\n     * @param raw - The JSON with comments string being validated.\n     *\n     * @returns A list of errors or `null` if valid.\n     */\n    validate(raw) {\n        const data = { composite: {}, user: {} };\n        const { id, schema } = this.plugin;\n        const validator = this.registry.validator;\n        const version = this.version;\n        return validator.validateData({ data, id, raw, schema, version }, false);\n    }\n    /**\n     * Handle plugin changes in the setting registry.\n     */\n    _onPluginChanged(sender, plugin) {\n        if (plugin === this.plugin.id) {\n            this._changed.emit(undefined);\n        }\n    }\n}\n/**\n * A namespace for `SettingRegistry` statics.\n */\n(function (SettingRegistry) {\n    /**\n     * Reconcile the menus.\n     *\n     * @param reference The reference list of menus.\n     * @param addition The list of menus to add.\n     * @param warn Warn if the command items are duplicated within the same menu.\n     * @returns The reconciled list of menus.\n     */\n    function reconcileMenus(reference, addition, warn = false, addNewItems = true) {\n        if (!reference) {\n            return addition && addNewItems ? JSONExt.deepCopy(addition) : [];\n        }\n        if (!addition) {\n            return JSONExt.deepCopy(reference);\n        }\n        const merged = JSONExt.deepCopy(reference);\n        addition.forEach(menu => {\n            const refIndex = merged.findIndex(ref => ref.id === menu.id);\n            if (refIndex >= 0) {\n                merged[refIndex] = Object.assign(Object.assign(Object.assign({}, merged[refIndex]), menu), { items: reconcileItems(merged[refIndex].items, menu.items, warn, addNewItems) });\n            }\n            else {\n                if (addNewItems) {\n                    merged.push(menu);\n                }\n            }\n        });\n        return merged;\n    }\n    SettingRegistry.reconcileMenus = reconcileMenus;\n    /**\n     * Merge two set of menu items.\n     *\n     * @param reference Reference set of menu items\n     * @param addition New items to add\n     * @param warn Whether to warn if item is duplicated; default to false\n     * @returns The merged set of items\n     */\n    function reconcileItems(reference, addition, warn = false, addNewItems = true) {\n        if (!reference) {\n            return addition ? JSONExt.deepCopy(addition) : undefined;\n        }\n        if (!addition) {\n            return JSONExt.deepCopy(reference);\n        }\n        const items = JSONExt.deepCopy(reference);\n        // Merge array element depending on the type\n        addition.forEach(item => {\n            var _a;\n            switch ((_a = item.type) !== null && _a !== void 0 ? _a : 'command') {\n                case 'separator':\n                    if (addNewItems) {\n                        items.push(Object.assign({}, item));\n                    }\n                    break;\n                case 'submenu':\n                    if (item.submenu) {\n                        const refIndex = items.findIndex(ref => { var _a, _b; return ref.type === 'submenu' && ((_a = ref.submenu) === null || _a === void 0 ? void 0 : _a.id) === ((_b = item.submenu) === null || _b === void 0 ? void 0 : _b.id); });\n                        if (refIndex < 0) {\n                            if (addNewItems) {\n                                items.push(JSONExt.deepCopy(item));\n                            }\n                        }\n                        else {\n                            items[refIndex] = Object.assign(Object.assign(Object.assign({}, items[refIndex]), item), { submenu: reconcileMenus(items[refIndex].submenu\n                                    ? [items[refIndex].submenu]\n                                    : null, [item.submenu], warn, addNewItems)[0] });\n                        }\n                    }\n                    break;\n                case 'command':\n                    if (item.command) {\n                        const refIndex = items.findIndex(ref => {\n                            var _a, _b;\n                            return ref.command === item.command &&\n                                ref.selector === item.selector &&\n                                JSONExt.deepEqual((_a = ref.args) !== null && _a !== void 0 ? _a : {}, (_b = item.args) !== null && _b !== void 0 ? _b : {});\n                        });\n                        if (refIndex < 0) {\n                            if (addNewItems) {\n                                items.push(Object.assign({}, item));\n                            }\n                        }\n                        else {\n                            if (warn) {\n                                console.warn(`Menu entry for command '${item.command}' is duplicated.`);\n                            }\n                            items[refIndex] = Object.assign(Object.assign({}, items[refIndex]), item);\n                        }\n                    }\n            }\n        });\n        return items;\n    }\n    SettingRegistry.reconcileItems = reconcileItems;\n    /**\n     * Remove disabled entries from menu items\n     *\n     * @param items Menu items\n     * @returns Filtered menu items\n     */\n    function filterDisabledItems(items) {\n        return items.reduce((final, value) => {\n            var _a;\n            const copy = Object.assign({}, value);\n            if (!copy.disabled) {\n                if (copy.type === 'submenu') {\n                    const { submenu } = copy;\n                    if (submenu && !submenu.disabled) {\n                        copy.submenu = Object.assign(Object.assign({}, submenu), { items: filterDisabledItems((_a = submenu.items) !== null && _a !== void 0 ? _a : []) });\n                    }\n                }\n                final.push(copy);\n            }\n            return final;\n        }, []);\n    }\n    SettingRegistry.filterDisabledItems = filterDisabledItems;\n    /**\n     * Reconcile default and user shortcuts and return the composite list.\n     *\n     * @param defaults - The list of default shortcuts.\n     *\n     * @param user - The list of user shortcut overrides and additions.\n     *\n     * @returns A loadable list of shortcuts (omitting disabled and overridden).\n     */\n    function reconcileShortcuts(defaults, user) {\n        const memo = {};\n        // If a user shortcut collides with another user shortcut warn and filter.\n        user = user.filter(shortcut => {\n            const keys = CommandRegistry.normalizeKeys(shortcut).join(RECORD_SEPARATOR);\n            if (!keys) {\n                console.warn('Skipping this shortcut because there are no actionable keys on this platform', shortcut);\n                return false;\n            }\n            if (!(keys in memo)) {\n                memo[keys] = {};\n            }\n            const { selector } = shortcut;\n            if (!(selector in memo[keys])) {\n                memo[keys][selector] = false; // Do not warn if a default shortcut conflicts.\n                return true;\n            }\n            console.warn('Skipping this shortcut because it collides with another shortcut.', shortcut);\n            return false;\n        });\n        // If a default shortcut collides with another default, warn and filter,\n        // unless one of the shortcuts is a disabling shortcut (so look through\n        // disabled shortcuts first). If a shortcut has already been added by the\n        // user preferences, filter it out too (this includes shortcuts that are\n        // disabled by user preferences).\n        defaults = [\n            ...defaults.filter(s => !!s.disabled),\n            ...defaults.filter(s => !s.disabled)\n        ].filter(shortcut => {\n            const keys = CommandRegistry.normalizeKeys(shortcut).join(RECORD_SEPARATOR);\n            if (!keys) {\n                return false;\n            }\n            if (!(keys in memo)) {\n                memo[keys] = {};\n            }\n            const { disabled, selector } = shortcut;\n            if (!(selector in memo[keys])) {\n                // Warn of future conflicts if the default shortcut is not disabled.\n                memo[keys][selector] = !disabled;\n                return true;\n            }\n            // We have a conflict now. Warn the user if we need to do so.\n            if (memo[keys][selector]) {\n                console.warn('Skipping this default shortcut because it collides with another default shortcut.', shortcut);\n            }\n            return false;\n        });\n        // Return all the shortcuts that should be registered\n        return (user\n            .concat(defaults)\n            .filter(shortcut => !shortcut.disabled)\n            // Fix shortcuts comparison in rjsf Form to avoid polluting the user settings\n            .map(shortcut => {\n            return Object.assign({ args: {} }, shortcut);\n        }));\n    }\n    SettingRegistry.reconcileShortcuts = reconcileShortcuts;\n    /**\n     * Merge two set of toolbar items.\n     *\n     * @param reference Reference set of toolbar items\n     * @param addition New items to add\n     * @param warn Whether to warn if item is duplicated; default to false\n     * @returns The merged set of items\n     */\n    function reconcileToolbarItems(reference, addition, warn = false) {\n        if (!reference) {\n            return addition ? JSONExt.deepCopy(addition) : undefined;\n        }\n        if (!addition) {\n            return JSONExt.deepCopy(reference);\n        }\n        const items = JSONExt.deepCopy(reference);\n        // Merge array element depending on the type\n        addition.forEach(item => {\n            // Name must be unique so it's sufficient to only compare it\n            const refIndex = items.findIndex(ref => ref.name === item.name);\n            if (refIndex < 0) {\n                items.push(Object.assign({}, item));\n            }\n            else {\n                if (warn &&\n                    JSONExt.deepEqual(Object.keys(item), Object.keys(items[refIndex]))) {\n                    console.warn(`Toolbar item '${item.name}' is duplicated.`);\n                }\n                items[refIndex] = Object.assign(Object.assign({}, items[refIndex]), item);\n            }\n        });\n        return items;\n    }\n    SettingRegistry.reconcileToolbarItems = reconcileToolbarItems;\n})(SettingRegistry || (SettingRegistry = {}));\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default indentation level, uses spaces instead of tabs.\n     */\n    const indent = '    ';\n    /**\n     * Replacement text for schema properties missing a `description` field.\n     */\n    const nondescript = '[missing schema description]';\n    /**\n     * Replacement text for schema properties missing a `title` field.\n     */\n    const untitled = '[missing schema title]';\n    /**\n     * Returns an annotated (JSON with comments) version of a schema's defaults.\n     */\n    function annotatedDefaults(schema, plugin) {\n        const { description, properties, title } = schema;\n        const keys = properties\n            ? Object.keys(properties).sort((a, b) => a.localeCompare(b))\n            : [];\n        const length = Math.max((description || nondescript).length, plugin.length);\n        return [\n            '{',\n            prefix(`${title || untitled}`),\n            prefix(plugin),\n            prefix(description || nondescript),\n            prefix('*'.repeat(length)),\n            '',\n            join(keys.map(key => defaultDocumentedValue(schema, key))),\n            '}'\n        ].join('\\n');\n    }\n    Private.annotatedDefaults = annotatedDefaults;\n    /**\n     * Returns an annotated (JSON with comments) version of a plugin's\n     * setting data.\n     */\n    function annotatedPlugin(plugin, data) {\n        const { description, title } = plugin.schema;\n        const keys = Object.keys(data).sort((a, b) => a.localeCompare(b));\n        const length = Math.max((description || nondescript).length, plugin.id.length);\n        return [\n            '{',\n            prefix(`${title || untitled}`),\n            prefix(plugin.id),\n            prefix(description || nondescript),\n            prefix('*'.repeat(length)),\n            '',\n            join(keys.map(key => documentedValue(plugin.schema, key, data[key]))),\n            '}'\n        ].join('\\n');\n    }\n    Private.annotatedPlugin = annotatedPlugin;\n    /**\n     * Returns the default value-with-documentation-string for a\n     * specific schema property.\n     */\n    function defaultDocumentedValue(schema, key) {\n        const props = (schema.properties && schema.properties[key]) || {};\n        const type = props['type'];\n        const description = props['description'] || nondescript;\n        const title = props['title'] || '';\n        const reified = reifyDefault(schema, key);\n        const spaces = indent.length;\n        const defaults = reified !== undefined\n            ? prefix(`\"${key}\": ${JSON.stringify(reified, null, spaces)}`, indent)\n            : prefix(`\"${key}\": ${type}`);\n        return [prefix(title), prefix(description), defaults]\n            .filter(str => str.length)\n            .join('\\n');\n    }\n    /**\n     * Returns a value-with-documentation-string for a specific schema property.\n     */\n    function documentedValue(schema, key, value) {\n        const props = schema.properties && schema.properties[key];\n        const description = (props && props['description']) || nondescript;\n        const title = (props && props['title']) || untitled;\n        const spaces = indent.length;\n        const attribute = prefix(`\"${key}\": ${JSON.stringify(value, null, spaces)}`, indent);\n        return [prefix(title), prefix(description), attribute].join('\\n');\n    }\n    /**\n     * Returns a joined string with line breaks and commas where appropriate.\n     */\n    function join(body) {\n        return body.reduce((acc, val, idx) => {\n            const rows = val.split('\\n');\n            const last = rows[rows.length - 1];\n            const comment = last.trim().indexOf('//') === 0;\n            const comma = comment || idx === body.length - 1 ? '' : ',';\n            const separator = idx === body.length - 1 ? '' : '\\n\\n';\n            return acc + val + comma + separator;\n        }, '');\n    }\n    /**\n     * Returns a documentation string with a comment prefix added on every line.\n     */\n    function prefix(source, pre = `${indent}// `) {\n        return pre + source.split('\\n').join(`\\n${pre}`);\n    }\n    /**\n     * Create a fully extrapolated default value for a root key in a schema.\n     */\n    function reifyDefault(schema, root) {\n        var _a, _b, _c;\n        const definitions = schema.definitions;\n        // If the property is at the root level, traverse its schema.\n        schema = (root ? (_a = schema.properties) === null || _a === void 0 ? void 0 : _a[root] : schema) || {};\n        if (schema.type === 'object') {\n            // Make a copy of the default value to populate.\n            const result = JSONExt.deepCopy(schema.default);\n            // Iterate through and populate each child property.\n            const props = schema.properties || {};\n            for (const property in props) {\n                result[property] = reifyDefault(props[property]);\n            }\n            return result;\n        }\n        else if (schema.type === 'array') {\n            // Make a copy of the default value to populate.\n            const result = JSONExt.deepCopy(schema.default);\n            // Items defines the properties of each item in the array\n            let props = schema.items || {};\n            // Use referenced definition if one exists\n            if (props['$ref'] && definitions) {\n                const ref = props['$ref'].replace('#/definitions/', '');\n                props = (_b = definitions[ref]) !== null && _b !== void 0 ? _b : {};\n            }\n            // Iterate through the items in the array and fill in defaults\n            for (const item in result) {\n                // Use the values that are hard-coded in the default array over the defaults for each field.\n                const reified = reifyDefault(props) || {};\n                for (const prop in reified) {\n                    if ((_c = result[item]) === null || _c === void 0 ? void 0 : _c[prop]) {\n                        reified[prop] = result[item][prop];\n                    }\n                }\n                result[item] = reified;\n            }\n            return result;\n        }\n        else {\n            return schema.default;\n        }\n    }\n    Private.reifyDefault = reifyDefault;\n})(Private || (Private = {}));\n//# sourceMappingURL=settingregistry.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The setting registry token.\n */\nexport const ISettingRegistry = new Token('@jupyterlab/coreutils:ISettingRegistry');\n//# sourceMappingURL=tokens.js.map","module.exports = {\"$schema\":\"http://json-schema.org/draft-07/schema\",\"title\":\"JupyterLab Plugin Settings/Preferences Schema\",\"description\":\"JupyterLab plugin settings/preferences schema\",\"version\":\"1.0.0\",\"type\":\"object\",\"additionalProperties\":true,\"properties\":{\"jupyter.lab.internationalization\":{\"type\":\"object\",\"properties\":{\"selectors\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"minLength\":1}},\"domain\":{\"type\":\"string\",\"minLength\":1}}},\"jupyter.lab.menus\":{\"type\":\"object\",\"properties\":{\"main\":{\"title\":\"Main menu entries\",\"description\":\"List of menu items to add to the main menubar.\",\"items\":{\"$ref\":\"#/definitions/menu\"},\"type\":\"array\",\"default\":[]},\"context\":{\"title\":\"The application context menu.\",\"description\":\"List of context menu items.\",\"items\":{\"allOf\":[{\"$ref\":\"#/definitions/menuItem\"},{\"properties\":{\"selector\":{\"description\":\"The CSS selector for the context menu item.\",\"type\":\"string\"}}}]},\"type\":\"array\",\"default\":[]}},\"additionalProperties\":false},\"jupyter.lab.setting-deprecated\":{\"type\":\"boolean\",\"default\":false},\"jupyter.lab.setting-icon\":{\"type\":\"string\",\"default\":\"\"},\"jupyter.lab.setting-icon-class\":{\"type\":\"string\",\"default\":\"\"},\"jupyter.lab.setting-icon-label\":{\"type\":\"string\",\"default\":\"Plugin\"},\"jupyter.lab.shortcuts\":{\"items\":{\"$ref\":\"#/definitions/shortcut\"},\"type\":\"array\",\"default\":[]},\"jupyter.lab.toolbars\":{\"properties\":{\"^\\\\w[\\\\w-\\\\.]*$\":{\"items\":{\"$ref\":\"#/definitions/toolbarItem\"},\"type\":\"array\",\"default\":[]}},\"type\":\"object\",\"default\":{}},\"jupyter.lab.transform\":{\"type\":\"boolean\",\"default\":false}},\"definitions\":{\"menu\":{\"properties\":{\"disabled\":{\"description\":\"Whether the menu is disabled or not\",\"type\":\"boolean\",\"default\":false},\"icon\":{\"description\":\"Menu icon id\",\"type\":\"string\"},\"id\":{\"description\":\"Menu unique id\",\"oneOf\":[{\"type\":\"string\",\"enum\":[\"jp-menu-file\",\"jp-menu-file-new\",\"jp-menu-edit\",\"jp-menu-help\",\"jp-menu-kernel\",\"jp-menu-run\",\"jp-menu-settings\",\"jp-menu-view\",\"jp-menu-tabs\"]},{\"type\":\"string\",\"pattern\":\"[a-z][a-z0-9\\\\-_]+\"}]},\"items\":{\"description\":\"Menu items\",\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/menuItem\"}},\"label\":{\"description\":\"Menu label\",\"type\":\"string\"},\"mnemonic\":{\"description\":\"Mnemonic index for the label\",\"type\":\"number\",\"minimum\":-1,\"default\":-1},\"rank\":{\"description\":\"Menu rank\",\"type\":\"number\",\"minimum\":0}},\"required\":[\"id\"],\"type\":\"object\"},\"menuItem\":{\"properties\":{\"args\":{\"description\":\"Command arguments\",\"type\":\"object\"},\"command\":{\"description\":\"Command id\",\"type\":\"string\"},\"disabled\":{\"description\":\"Whether the item is disabled or not\",\"type\":\"boolean\",\"default\":false},\"type\":{\"description\":\"Item type\",\"type\":\"string\",\"enum\":[\"command\",\"submenu\",\"separator\"],\"default\":\"command\"},\"rank\":{\"description\":\"Item rank\",\"type\":\"number\",\"minimum\":0},\"submenu\":{\"oneOf\":[{\"$ref\":\"#/definitions/menu\"},{\"type\":\"null\"}]}},\"type\":\"object\"},\"shortcut\":{\"properties\":{\"args\":{\"title\":\"The arguments for the command\",\"type\":\"object\"},\"command\":{\"title\":\"The command id\",\"description\":\"The command executed when the binding is matched.\",\"type\":\"string\"},\"disabled\":{\"description\":\"Whether this shortcut is disabled or not.\",\"type\":\"boolean\",\"default\":false},\"keys\":{\"title\":\"The key sequence for the binding\",\"description\":\"The key shortcut like `Accel A` or the sequence of shortcuts to press like [`Accel A`, `B`]\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"macKeys\":{\"title\":\"The key sequence for the binding on macOS\",\"description\":\"The key shortcut like `Cmd A` or the sequence of shortcuts to press like [`Cmd A`, `B`]\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"winKeys\":{\"title\":\"The key sequence for the binding on Windows\",\"description\":\"The key shortcut like `Ctrl A` or the sequence of shortcuts to press like [`Ctrl A`, `B`]\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"linuxKeys\":{\"title\":\"The key sequence for the binding on Linux\",\"description\":\"The key shortcut like `Ctrl A` or the sequence of shortcuts to press like [`Ctrl A`, `B`]\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"selector\":{\"title\":\"CSS selector\",\"type\":\"string\"}},\"required\":[\"command\",\"keys\",\"selector\"],\"type\":\"object\"},\"toolbarItem\":{\"properties\":{\"name\":{\"title\":\"Unique name\",\"type\":\"string\"},\"args\":{\"title\":\"Command arguments\",\"type\":\"object\"},\"command\":{\"title\":\"Command id\",\"type\":\"string\",\"default\":\"\"},\"disabled\":{\"title\":\"Whether the item is ignored or not\",\"type\":\"boolean\",\"default\":false},\"icon\":{\"title\":\"Item icon id\",\"description\":\"If defined, it will override the command icon\",\"type\":\"string\"},\"label\":{\"title\":\"Item label\",\"description\":\"If defined, it will override the command label\",\"type\":\"string\"},\"type\":{\"title\":\"Item type\",\"type\":\"string\",\"enum\":[\"command\",\"spacer\"]},\"rank\":{\"title\":\"Item rank\",\"type\":\"number\",\"minimum\":0,\"default\":50}},\"required\":[\"name\"],\"additionalProperties\":false,\"type\":\"object\"}}}"],"names":[],"sourceRoot":""}