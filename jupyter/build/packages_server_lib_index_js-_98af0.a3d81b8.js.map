{"version":3,"file":"packages_server_lib_index_js-_98af0.a3d81b8.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACwE;AACtB;AACV;AACN;AAClC;AACA;AACA;AACO,gCAAgC,4DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2CAAM;AACjC,mCAAmC,gEAAc;AACjD;AACA;AACA,mBAAmB,+EAA6B;AAChD,yBAAyB;AACzB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AACsB;AACG;AACA;AACO;;;;;;;;;;;;;;;ACLhC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;AC7G2C;AACgB;AACpD;AACP;AACA;AACA,wCAAwC,qDAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAW,CAAC,wEAAqB;AACvD;AACA;AACA,SAAS;AACT,gEAAgE,IAAI;AACpE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5C0C;AAC1C;AACA;AACA;AACO,8CAA8C,oDAAK","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/serviceworker.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/tokens.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ServerConnection, ServiceManager } from '@jupyterlab/services';\nimport { Application } from '@lumino/application';\nimport { WebSocket } from 'mock-socket';\nimport { Router } from './router';\n/**\n * Server is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLiteServer extends Application {\n    /**\n     * Construct a new JupyterLite object.\n     *\n     * @param options The instantiation options for a JupyterLiteServer application.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        /**\n         * The name of the application.\n         */\n        this.name = 'JupyterLite Server';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n        this._router = new Router();\n        this._serviceManager = new ServiceManager({\n            standby: 'never',\n            serverSettings: {\n                ...ServerConnection.makeSettings(),\n                WebSocket,\n                fetch: (_a = this.fetch.bind(this)) !== null && _a !== void 0 ? _a : undefined,\n            },\n        });\n    }\n    /**\n     * Get the underlying `Router` instance.\n     */\n    get router() {\n        return this._router;\n    }\n    /**\n     * Get the underlying lite service manager for this app.\n     */\n    get serviceManager() {\n        return this._serviceManager;\n    }\n    /**\n     * Handle an incoming request from the client.\n     *\n     * @param req The incoming request\n     * @param init The optional init request\n     */\n    async fetch(req, init) {\n        if (!(req instanceof Request)) {\n            throw Error('Request info is not a Request');\n        }\n        return this._router.route(req);\n    }\n    /**\n     * Attach the application shell to the DOM.\n     *\n     * @param id - The id of the host node for the shell, or `''`.\n     *\n     * #### Notes\n     * For this server application there is no shell to attach\n     */\n    attachShell(id) {\n        // no-op\n    }\n    /**\n     * A method invoked on a window `'resize'` event.\n     *\n     * #### Notes\n     * For this server application there is no shell to update\n     */\n    evtResize(event) {\n        // no-op\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach((item) => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach((mod) => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './app';\nexport * from './router';\nexport * from './tokens';\nexport * from './serviceworker';\n","/**\n * A simple router.\n */\nexport class Router {\n    constructor() {\n        this._routes = [];\n    }\n    /**\n     * Add a new GET route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    get(pattern, callback) {\n        this._add('GET', pattern, callback);\n    }\n    /**\n     * Add a new PUT route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    put(pattern, callback) {\n        this._add('PUT', pattern, callback);\n    }\n    /**\n     * Add a new POST route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    post(pattern, callback) {\n        this._add('POST', pattern, callback);\n    }\n    /**\n     * Add a new PATCH route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    patch(pattern, callback) {\n        this._add('PATCH', pattern, callback);\n    }\n    /**\n     * Add a new DELETE route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    delete(pattern, callback) {\n        this._add('DELETE', pattern, callback);\n    }\n    /**\n     * Route a request.\n     *\n     * @param req The request to route.\n     */\n    async route(req) {\n        const url = new URL(req.url);\n        const { method } = req;\n        const { pathname } = url;\n        for (const r of this._routes) {\n            if (r.method !== method) {\n                continue;\n            }\n            const match = pathname.match(r.pattern);\n            if (!match) {\n                continue;\n            }\n            const matches = match.slice(1);\n            let body;\n            if (r.method === 'PATCH' || r.method === 'PUT' || r.method === 'POST') {\n                try {\n                    body = JSON.parse(await req.text());\n                }\n                catch {\n                    body = undefined;\n                }\n            }\n            return r.callback.call(null, {\n                pathname,\n                body,\n                query: Object.fromEntries(url.searchParams),\n            }, ...matches);\n        }\n        throw new Error('Cannot route ' + req.method + ' ' + req.url);\n    }\n    /**\n     * Add a new route.\n     *\n     * @param method The method\n     * @param pattern The pattern\n     * @param callback The callback\n     */\n    _add(method, pattern, callback) {\n        if (typeof pattern === 'string') {\n            pattern = new RegExp(pattern);\n        }\n        this._routes.push({\n            method,\n            pattern,\n            callback,\n        });\n    }\n}\n","import { Signal } from '@lumino/signaling';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nexport class ServiceWorkerRegistrationWrapper {\n    constructor() {\n        this._registration = null;\n        this._registrationChanged = new Signal(this);\n        this.initialize();\n    }\n    /**\n     * A signal emitted when the registration changes.\n     */\n    get registrationChanged() {\n        return this._registrationChanged;\n    }\n    /**\n     * Whether the ServiceWorker is enabled or not.\n     */\n    get enabled() {\n        return this._registration !== null;\n    }\n    async initialize() {\n        if (!('serviceWorker' in navigator)) {\n            console.error('ServiceWorker registration failed: Service Workers not supported in this browser');\n            this.setRegistration(null);\n        }\n        if (navigator.serviceWorker.controller) {\n            const registration = await navigator.serviceWorker.getRegistration(navigator.serviceWorker.controller.scriptURL);\n            if (registration) {\n                this.setRegistration(registration);\n            }\n        }\n        return await navigator.serviceWorker\n            .register(URLExt.join(PageConfig.getBaseUrl(), 'services.js'))\n            .then((registration) => {\n            this.setRegistration(registration);\n        }, (err) => {\n            console.error(`ServiceWorker registration failed: ${err}`);\n            this.setRegistration(null);\n        });\n    }\n    setRegistration(registration) {\n        this._registration = registration;\n        this._registrationChanged.emit(this._registration);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the ServiceWorker.\n */\nexport const IServiceWorkerRegistrationWrapper = new Token('@jupyterlite/server-extension:IServiceWorkerRegistrationWrapper');\n"],"names":[],"sourceRoot":""}