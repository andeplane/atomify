{"version":3,"file":"node_modules_lib0_map_js-packages_application-extension_lib_index_js.dd81148.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY;AACZ;AACO;AACP;AACA,wBAAwB,aAAa;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,GAAG;AACd,WAAW,cAAc;AACzB,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,iBAAiB;AAC5B,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,uBAAuB;AAClC,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,uBAAuB;AAClC,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AAC8D;AACwB;AAC3B;AACD;AACwB;AACpB;AACb;AACK;AACa;AACC;AAChB;AACX;AACG;AAClB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,iEAAe,EAAE,2DAAS;AACzC;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2DAAmB,WAAW,oCAAoC;AACvG,oBAAoB,2DAAmB,WAAW,+BAA+B;AACjF,+BAA+B,2DAAmB,WAAW,8BAA8B;AAC3F,oBAAoB,2DAAmB,UAAU,mCAAmC;AACpF,wBAAwB,2DAAmB,CAAC,0EAAkB,IAAI,gCAAgC;AAClG;AACA;AACA;AACA;AACA,uCAAuC,2DAAmB,WAAW,qCAAqC;AAC1G,oBAAoB,2DAAmB,QAAQ,kGAAkG;AACjJ,oBAAoB,2DAAmB,QAAQ,iGAAiG;AAChJ,mCAAmC,2DAAmB,WAAW,iCAAiC;AAClG,8BAA8B,2DAAmB,UAAU,4BAA4B;AACvF;AACA;AACA,uBAAuB,gEAAU;AACjC;AACA;AACA;AACA,wBAAwB,qEAAmB;AAC3C;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA,8BAA8B,qCAAqC;AACnE;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6EAAwB;AACtC,eAAe,gEAAW;AAC1B;AACA,8BAA8B,uEAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAY;AACnC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW,EAAE,oEAAgB;AAC5C,eAAe,iEAAe,EAAE,wEAAmB;AACnD;AACA;AACA,gBAAgB,kCAAkC;AAClD,gBAAgB,WAAW;AAC3B;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,4DAA4D,eAAe;AAC3E;AACA;AACA;AACA;AACA,uCAAuC,MAAM,gBAAgB,4BAA4B;AACzF;AACA;AACA;AACA;AACA,2CAA2C,MAAM,SAAS,cAAc;AACxE;AACA;AACA;AACA,2CAA2C,MAAM,gBAAgB,kCAAkC;AACnG;AACA;AACA;AACA,0DAA0D,WAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEAAU;AACrC;AACA;AACA,kCAAkC,iEAAe,GAAG,uBAAuB;AAC3E,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,8BAA8B,kDAAkD;AAChF;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2DAAO;AAC5C;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,sBAAsB,6EAAsB,GAAG,wBAAwB;AACvE;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAM;AAC/B,QAAQ,wEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oCAAoC,SAAS;AAC7C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAO,EAAE,oEAAgB;AACxC,eAAe,8DAAS;AACxB;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uEAAoB;AACrD;AACA;AACA;AACA,iEAAiE,YAAY;AAC7E;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,gDAAgD,8DAAW,CAAC,wEAAqB;AACjF;AACA;AACA,oCAAoC,mBAAmB;AACvD,+CAA+C,SAAS,EAAE,OAAO,KAAK,mBAAmB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,0BAA0B,+BAA+B;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,gEAAW;AAC/C;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,UAAU;AAC1B,yBAAyB,2DAAQ;AACjC,8BAA8B,uEAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAW,CAAC,wEAAqB;AACrE,+BAA+B,2DAAO,CAAC,0DAAM;AAC7C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gBAAgB,wEAAsB;AACtC,aAAa;AACb;AACA,gBAAgB,2DAAO;AACvB,kBAAkB,yEAAkB,GAAG,wBAAwB;AAC/D;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/map.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/index.js"],"sourcesContent":["/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template T,K\n * @param {Map<K, T>} map\n * @param {K} key\n * @param {function():T} createT\n * @return {T}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter, ILabShell, } from '@jupyterlab/application';\nimport { Clipboard, ICommandPalette, Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IDocumentProviderFactory, ProviderMock, } from '@jupyterlab/docprovider';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { downloadIcon, linkIcon } from '@jupyterlab/ui-components';\nimport { liteIcon, liteWordmark } from '@jupyterlite/ui-components';\nimport { filter, toArray } from '@lumino/algorithm';\nimport { Widget } from '@lumino/widgets';\nimport { getParam } from 'lib0/environment';\nimport React from 'react';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks, documents and consoles\n */\nconst URL_PATTERN = new RegExp('/(lab|notebooks|edit|consoles)\\\\/?');\n/**\n * The command IDs used by the application extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.about = 'application:about';\n    CommandIDs.docmanagerDownload = 'docmanager:download';\n    CommandIDs.filebrowserDownload = 'filebrowser:download';\n    CommandIDs.copyShareableLink = 'filebrowser:share-main';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * Add a command to show an About dialog.\n */\nconst about = {\n    id: '@jupyterlite/application-extension:about',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, palette, menu) => {\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.about, {\n            label: trans.__('About %1', app.name),\n            execute: () => {\n                const versionNumber = trans.__('Version %1', app.version);\n                const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n                    React.createElement(\"span\", { className: \"jp-About-version\" }, versionNumber)));\n                const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                    React.createElement(\"div\", { className: \"jp-About-header-info\" },\n                        React.createElement(liteWordmark.react, { height: \"auto\", width: \"196px\" }),\n                        versionInfo)));\n                // Create the body of the about dialog\n                const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';\n                const contributorsURL = 'https://github.com/jupyterlite/jupyterlite/graphs/contributors';\n                const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n                    React.createElement(\"a\", { href: contributorsURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('CONTRIBUTOR LIST')),\n                    React.createElement(\"a\", { href: jupyterliteURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('JUPYTERLITE ON GITHUB'))));\n                const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, trans.__('© 2021-2022 JupyterLite Contributors')));\n                const body = (React.createElement(\"div\", { className: \"jp-About-body\" },\n                    externalLinks,\n                    copyright));\n                return showDialog({\n                    title,\n                    body,\n                    buttons: [\n                        Dialog.createButton({\n                            label: trans.__('Dismiss'),\n                            className: 'jp-About-button jp-mod-reject jp-mod-styled',\n                        }),\n                    ],\n                });\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.about, category });\n        }\n        if (menu) {\n            menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);\n        }\n    },\n};\n/**\n * An alternative document provider plugin\n */\nconst docProviderPlugin = {\n    id: '@jupyterlite/application-extension:docprovider',\n    provides: IDocumentProviderFactory,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        const collaborative = PageConfig.getOption('collaborative') === 'true';\n        const factory = (options) => {\n            if (collaborative) {\n                const trans = translator.load(I18N_BUNDLE);\n                console.warn(trans.__('The `collaborative` feature was enabled, but no docprovider is available.'));\n                console.info(trans.__('Install `jupyterlab-webrtc-docprovider` to enable WebRTC-based collaboration.'));\n            }\n            return new ProviderMock();\n        };\n        return factory;\n    },\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin = {\n    id: '@jupyterlite/application-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IFileBrowserFactory],\n    activate: (app, translator, docManager, palette, factory) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, serviceManager, shell } = app;\n        const { contents } = serviceManager;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        const downloadContent = async (contentPath, fileName) => {\n            var _a, _b, _c;\n            const model = await contents.get(contentPath, { content: true });\n            const element = document.createElement('a');\n            if (model.type === 'notebook' || model.format === 'json') {\n                const mime = (_a = model.mimetype) !== null && _a !== void 0 ? _a : 'text/json';\n                const content = JSON.stringify(model.content, null, 2);\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(content)}`;\n            }\n            else if (model.type === 'file') {\n                if (model.format === 'base64') {\n                    const mime = (_b = model.mimetype) !== null && _b !== void 0 ? _b : 'application/octet-stream';\n                    element.href = `data:${mime};base64,${model.content}`;\n                }\n                else {\n                    const mime = (_c = model.mimetype) !== null && _c !== void 0 ? _c : 'text/plain';\n                    element.href = `data:${mime};charset=utf-8,${encodeURIComponent(model.content)}`;\n                }\n            }\n            else {\n                throw new Error(`Content whose type is \"${model.type}\" cannot be downloaded`);\n            }\n            element.download = fileName;\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        };\n        commands.addCommand(CommandIDs.docmanagerDownload, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: async () => {\n                // Checks that shell.currentWidget is valid:\n                const current = shell.currentWidget;\n                if (!isEnabled() || !current) {\n                    return;\n                }\n                const context = docManager.contextForWidget(current);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n                await context.save();\n                await downloadContent(context.path, context.path);\n            },\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.docmanagerDownload, category });\n        }\n        if (factory) {\n            const { tracker } = factory;\n            commands.addCommand(CommandIDs.filebrowserDownload, {\n                execute: async () => {\n                    const widget = tracker.currentWidget;\n                    if (!widget) {\n                        return;\n                    }\n                    const selected = toArray(widget.selectedItems());\n                    selected.forEach(async (item) => {\n                        if (item.type === 'directory') {\n                            return;\n                        }\n                        await downloadContent(item.path, item.name);\n                    });\n                },\n                icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n                label: trans.__('Download'),\n            });\n        }\n    },\n};\n/**\n * The main application icon.\n */\nconst liteLogo = {\n    id: '@jupyterlite/application-extension:logo',\n    // marking as optional to not throw errors in retro\n    optional: [ILabShell],\n    autoStart: true,\n    activate: (app, labShell) => {\n        if (!labShell) {\n            return;\n        }\n        const logo = new Widget();\n        liteIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px',\n        });\n        logo.id = 'jp-MainLogo';\n        labShell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands = {\n    id: '@jupyterlite/application-extension:notify-commands',\n    autoStart: true,\n    optional: [ILabShell],\n    activate: (app, labShell) => {\n        if (labShell) {\n            labShell.layoutModified.connect(() => {\n                app.commands.notifyCommandChanged();\n            });\n        }\n    },\n};\n/**\n * A custom opener plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    optional: [ILabShell],\n    activate: (app, router, docManager, labShell) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const { request, search } = parsed;\n                const matches = (_a = request.match(URL_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                if (!matches) {\n                    return;\n                }\n                const urlParams = new URLSearchParams(search);\n                const paths = urlParams.getAll('path');\n                if (!paths) {\n                    return;\n                }\n                const files = paths.map((path) => decodeURIComponent(path));\n                app.restored.then(() => {\n                    const page = PageConfig.getOption('retroPage');\n                    const [file] = files;\n                    switch (page) {\n                        case 'consoles': {\n                            commands.execute('console:create', { path: file });\n                            return;\n                        }\n                        case 'notebooks': {\n                            docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                                ref: '_noref',\n                            });\n                            return;\n                        }\n                        case 'edit': {\n                            docManager.open(file, EDITOR_FACTORY, undefined, {\n                                ref: '_noref',\n                            });\n                            return;\n                        }\n                        default: {\n                            // open all files in the lab interface\n                            files.forEach((file) => docManager.open(file));\n                            const url = new URL(URLExt.join(PageConfig.getBaseUrl(), request));\n                            // only remove the path (to keep extra parameters like the RTC room)\n                            url.searchParams.delete('path');\n                            const { pathname, search } = url;\n                            router.navigate(`${pathname}${search}`, { skipRouting: true });\n                            if (labShell) {\n                                // open the folder where the files are located on startup\n                                const showInBrowser = () => {\n                                    commands.execute('docmanager:show-in-file-browser');\n                                    labShell.currentChanged.disconnect(showInBrowser);\n                                };\n                                labShell.currentChanged.connect(showInBrowser);\n                            }\n                            break;\n                        }\n                    }\n                });\n            },\n        });\n        router.register({ command, pattern: URL_PATTERN });\n    },\n};\n/**\n * A custom plugin to share a link to a file.\n *\n * This url can be used to open a particular file in JupyterLab.\n * It also adds the corresponding room if RTC is enabled.\n *\n */\nconst shareFile = {\n    id: '@jupyterlite/application-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands } = app;\n        const { tracker } = factory;\n        const roomName = getParam('--room', '').trim();\n        const collaborative = PageConfig.getOption('collaborative') === 'true' && roomName;\n        commands.addCommand(CommandIDs.copyShareableLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const url = new URL(URLExt.join(PageConfig.getBaseUrl(), 'lab'));\n                const models = toArray(filter(widget.selectedItems(), (item) => item.type !== 'directory'));\n                models.forEach((model) => {\n                    url.searchParams.append('path', model.path);\n                });\n                if (collaborative) {\n                    url.searchParams.append('room', roomName);\n                }\n                Clipboard.copyToSystem(url.href);\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                toArray(tracker.currentWidget.selectedItems()).length >= 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link'),\n        });\n    },\n};\nconst plugins = [\n    about,\n    docProviderPlugin,\n    downloadPlugin,\n    liteLogo,\n    notifyCommands,\n    opener,\n    shareFile,\n];\nexport default plugins;\n"],"names":[],"sourceRoot":""}