"use strict";
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["vendors-node_modules_retrolab_application-extension_lib_index_js"],{

/***/ 58199:
/*!********************************************************************!*\
  !*** ../node_modules/@retrolab/application-extension/lib/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/application */ 63109);
/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/apputils */ 94367);
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jupyterlab_console__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/console */ 13414);
/* harmony import */ var _jupyterlab_console__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_console__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/coreutils */ 27476);
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/docmanager */ 91857);
/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jupyterlab/docregistry */ 5992);
/* harmony import */ var _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jupyterlab/mainmenu */ 27216);
/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jupyterlab/settingregistry */ 32421);
/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @jupyterlab/translation */ 13790);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _retrolab_application__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @retrolab/application */ 95191);
/* harmony import */ var _retrolab_application__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_retrolab_application__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _retrolab_ui_components__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @retrolab/ui-components */ 24769);
/* harmony import */ var _retrolab_ui_components__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_retrolab_ui_components__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @lumino/coreutils */ 26169);
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _lumino_disposable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @lumino/disposable */ 22062);
/* harmony import */ var _lumino_disposable__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_lumino_disposable__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @lumino/widgets */ 60150);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_13__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.














/**
 * The default notebook factory.
 */
const NOTEBOOK_FACTORY = 'Notebook';
/**
 * The editor factory.
 */
const EDITOR_FACTORY = 'Editor';
/**
 * A regular expression to match path to notebooks and documents
 */
const TREE_PATTERN = new RegExp('/(notebooks|edit)/(.*)');
/**
 * A regular expression to suppress the file extension from display for .ipynb files.
 */
const STRIP_IPYNB = /\.ipynb$/;
/**
 * The command IDs used by the application plugin.
 */
var CommandIDs;
(function (CommandIDs) {
    /**
     * Toggle Top Bar visibility
     */
    CommandIDs.toggleTop = 'application:toggle-top';
    /**
     * Toggle the Zen mode
     */
    CommandIDs.toggleZen = 'application:toggle-zen';
    /**
     * Open JupyterLab
     */
    CommandIDs.openLab = 'application:open-lab';
    /**
     * Open the tree page.
     */
    CommandIDs.openTree = 'application:open-tree';
    /**
     * Rename the current document
     */
    CommandIDs.rename = 'application:rename';
    /**
     * Resolve tree path
     */
    CommandIDs.resolveTree = 'application:resolve-tree';
})(CommandIDs || (CommandIDs = {}));
/**
 * Check if the application is dirty before closing the browser tab.
 */
const dirty = {
    id: '@retrolab/application-extension:dirty',
    autoStart: true,
    requires: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ILabStatus, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8__.ITranslator],
    activate: (app, status, translator) => {
        if (!(app instanceof _retrolab_application__WEBPACK_IMPORTED_MODULE_9__.RetroApp)) {
            throw new Error(`${dirty.id} must be activated in RetroLab.`);
        }
        const trans = translator.load('retrolab');
        const message = trans.__('Are you sure you want to exit RetroLab?\n\nAny unsaved changes will be lost.');
        window.addEventListener('beforeunload', event => {
            if (app.status.isDirty) {
                return (event.returnValue = message);
            }
        });
    }
};
/**
 * The logo plugin.
 */
const logo = {
    id: '@retrolab/application-extension:logo',
    autoStart: true,
    activate: (app) => {
        const baseUrl = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getBaseUrl();
        const node = document.createElement('a');
        node.href = `${baseUrl}retro/tree`;
        node.target = '_blank';
        node.rel = 'noopener noreferrer';
        const logo = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_13__.Widget({ node });
        const retroLogo = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getOption('retroLogo') === 'true';
        const icon = retroLogo ? _retrolab_ui_components__WEBPACK_IMPORTED_MODULE_10__.retroInlineIcon : _retrolab_ui_components__WEBPACK_IMPORTED_MODULE_10__.jupyterIcon;
        icon.element({
            container: node,
            elementPosition: 'center',
            padding: '2px 2px 2px 8px',
            height: '28px',
            width: 'auto'
        });
        logo.id = 'jp-RetroLogo';
        app.shell.add(logo, 'top', { rank: 0 });
    }
};
/**
 * A plugin to open documents in the main area.
 */
const opener = {
    id: '@retrolab/application-extension:opener',
    autoStart: true,
    requires: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.IRouter, _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_4__.IDocumentManager],
    activate: (app, router, docManager) => {
        const { commands } = app;
        const command = 'router:tree';
        commands.addCommand(command, {
            execute: (args) => {
                var _a;
                const parsed = args;
                const matches = (_a = parsed.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];
                const [, , path] = matches;
                if (!path) {
                    return;
                }
                const file = decodeURIComponent(path);
                const ext = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PathExt.extname(file);
                app.restored.then(() => {
                    // TODO: get factory from file type instead?
                    if (ext === '.ipynb') {
                        docManager.open(file, NOTEBOOK_FACTORY, undefined, {
                            ref: '_noref'
                        });
                    }
                    else {
                        docManager.open(file, EDITOR_FACTORY, undefined, {
                            ref: '_noref'
                        });
                    }
                });
            }
        });
        router.register({ command, pattern: TREE_PATTERN });
    }
};
/**
 * A plugin to customize menus
 *
 * TODO: use this plugin to customize the menu items and their order
 */
const menus = {
    id: '@retrolab/application-extension:menus',
    requires: [_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__.IMainMenu],
    autoStart: true,
    activate: (app, menu) => {
        // always disable the Tabs menu
        menu.tabsMenu.dispose();
        const page = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getOption('retroPage');
        switch (page) {
            case 'consoles':
            case 'terminals':
            case 'tree':
                menu.editMenu.dispose();
                menu.kernelMenu.dispose();
                menu.runMenu.dispose();
                break;
            case 'edit':
                menu.kernelMenu.dispose();
                menu.runMenu.dispose();
                break;
            default:
                break;
        }
    }
};
/**
 * Add commands to open the tree and running pages.
 */
const pages = {
    id: '@retrolab/application-extension:pages',
    autoStart: true,
    requires: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8__.ITranslator],
    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.ICommandPalette, _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__.IMainMenu],
    activate: (app, translator, palette, menu) => {
        const trans = translator.load('retrolab');
        const baseUrl = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getBaseUrl();
        app.commands.addCommand(CommandIDs.openLab, {
            label: trans.__('Open JupyterLab'),
            execute: () => {
                window.open(`${baseUrl}lab`);
            }
        });
        app.commands.addCommand(CommandIDs.openTree, {
            label: trans.__('Open Files'),
            execute: () => {
                window.open(`${baseUrl}retro/tree`);
            }
        });
        if (palette) {
            [CommandIDs.openLab, CommandIDs.openTree].forEach(command => {
                palette.addItem({ command, category: 'View' });
            });
        }
        if (menu) {
            menu.viewMenu.addGroup([{ command: CommandIDs.openLab }, { command: CommandIDs.openTree }], 0);
        }
    }
};
/**
 * The default paths for a RetroLab app.
 */
const paths = {
    id: '@retrolab/application-extension:paths',
    autoStart: true,
    provides: _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.JupyterFrontEnd.IPaths,
    activate: (app) => {
        if (!(app instanceof _retrolab_application__WEBPACK_IMPORTED_MODULE_9__.RetroApp)) {
            throw new Error(`${paths.id} must be activated in RetroLab.`);
        }
        return app.paths;
    }
};
/**
 * The default URL router provider.
 */
const router = {
    id: '@retrolab/application-extension:router',
    autoStart: true,
    provides: _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.IRouter,
    requires: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.JupyterFrontEnd.IPaths],
    activate: (app, paths) => {
        const { commands } = app;
        const base = paths.urls.base;
        const router = new _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.Router({ base, commands });
        void app.started.then(() => {
            // Route the very first request on load.
            void router.route();
            // Route all pop state events.
            window.addEventListener('popstate', () => {
                void router.route();
            });
        });
        return router;
    }
};
/**
 * The default session dialogs plugin
 */
const sessionDialogs = {
    id: '@retrolab/application-extension:session-dialogs',
    provides: _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.ISessionContextDialogs,
    autoStart: true,
    activate: () => _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.sessionContextDialogs
};
/**
 * The default RetroLab application shell.
 */
const shell = {
    id: '@retrolab/application-extension:shell',
    activate: (app) => {
        if (!(app.shell instanceof _retrolab_application__WEBPACK_IMPORTED_MODULE_9__.RetroShell)) {
            throw new Error(`${shell.id} did not find a RetroShell instance.`);
        }
        return app.shell;
    },
    autoStart: true,
    provides: _retrolab_application__WEBPACK_IMPORTED_MODULE_9__.IRetroShell
};
/**
 * A plugin to provide a spacer at rank 10000 for flex panels
 */
const spacer = {
    id: '@retrolab/application-extension:spacer',
    autoStart: true,
    activate: (app) => {
        const top = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_13__.Widget();
        top.id = _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.DOMUtils.createDomID();
        top.addClass('jp-RetroSpacer');
        app.shell.add(top, 'top', { rank: 10000 });
        const menu = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_13__.Widget();
        menu.id = _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.DOMUtils.createDomID();
        menu.addClass('jp-RetroSpacer');
        app.shell.add(menu, 'menu', { rank: 10000 });
    }
};
/**
 * The default JupyterLab application status provider.
 */
const status = {
    id: '@retrolab/application-extension:status',
    autoStart: true,
    provides: _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ILabStatus,
    activate: (app) => {
        if (!(app instanceof _retrolab_application__WEBPACK_IMPORTED_MODULE_9__.RetroApp)) {
            throw new Error(`${status.id} must be activated in RetroLab.`);
        }
        return app.status;
    }
};
/**
 * A plugin to display the document title in the browser tab title
 */
const tabTitle = {
    id: '@retrolab/application-extension:tab-title',
    autoStart: true,
    requires: [_retrolab_application__WEBPACK_IMPORTED_MODULE_9__.IRetroShell],
    activate: (app, shell) => {
        const setTabTitle = () => {
            const current = shell.currentWidget;
            if (current instanceof _jupyterlab_console__WEBPACK_IMPORTED_MODULE_2__.ConsolePanel) {
                const update = () => {
                    const title = current.sessionContext.path || current.sessionContext.name;
                    const basename = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PathExt.basename(title);
                    // Strip the ".ipynb" suffix from filenames for display in tab titles.
                    document.title = basename.replace(STRIP_IPYNB, '');
                };
                current.sessionContext.sessionChanged.connect(update);
                update();
                return;
            }
            else if (current instanceof _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_5__.DocumentWidget) {
                const update = () => {
                    const basename = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PathExt.basename(current.context.path);
                    document.title = basename.replace(STRIP_IPYNB, '');
                };
                current.context.pathChanged.connect(update);
                update();
            }
        };
        shell.currentChanged.connect(setTabTitle);
        setTabTitle();
    }
};
/**
 * A plugin to display and rename the title of a file
 */
const title = {
    id: '@retrolab/application-extension:title',
    autoStart: true,
    requires: [_retrolab_application__WEBPACK_IMPORTED_MODULE_9__.IRetroShell, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8__.ITranslator],
    optional: [_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_4__.IDocumentManager, _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.IRouter],
    activate: (app, shell, translator, docManager, router) => {
        const { commands } = app;
        const trans = translator.load('retrolab');
        const widget = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_13__.Widget();
        widget.id = 'jp-title';
        app.shell.add(widget, 'top', { rank: 10 });
        const addTitle = async () => {
            const current = shell.currentWidget;
            if (!current || !(current instanceof _jupyterlab_docregistry__WEBPACK_IMPORTED_MODULE_5__.DocumentWidget)) {
                return;
            }
            if (widget.node.children.length > 0) {
                return;
            }
            const h = document.createElement('h1');
            h.textContent = current.title.label.replace(STRIP_IPYNB, '');
            widget.node.appendChild(h);
            widget.node.style.marginLeft = '10px';
            if (!docManager) {
                return;
            }
            const isEnabled = () => {
                const { currentWidget } = shell;
                return !!(currentWidget && docManager.contextForWidget(currentWidget));
            };
            commands.addCommand(CommandIDs.rename, {
                label: () => trans.__('Rename…'),
                isEnabled,
                execute: async () => {
                    var _a, _b;
                    if (!isEnabled()) {
                        return;
                    }
                    const result = await (0,_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_4__.renameDialog)(docManager, current.context.path);
                    // activate the current widget to bring the focus
                    if (current) {
                        current.activate();
                    }
                    if (result === null) {
                        return;
                    }
                    const newPath = (_a = current.context.path) !== null && _a !== void 0 ? _a : result.path;
                    const basename = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PathExt.basename(newPath);
                    h.textContent = basename.replace(STRIP_IPYNB, '');
                    if (!router) {
                        return;
                    }
                    const matches = (_b = router.current.path.match(TREE_PATTERN)) !== null && _b !== void 0 ? _b : [];
                    const [, route, path] = matches;
                    if (!route || !path) {
                        return;
                    }
                    const encoded = encodeURIComponent(newPath);
                    router.navigate(`/retro/${route}/${encoded}`, {
                        skipRouting: true
                    });
                }
            });
            widget.node.onclick = async () => {
                void commands.execute(CommandIDs.rename);
            };
        };
        shell.currentChanged.connect(addTitle);
        void addTitle();
    }
};
/**
 * Plugin to toggle the top header visibility.
 */
const topVisibility = {
    id: '@retrolab/application-extension:top',
    requires: [_retrolab_application__WEBPACK_IMPORTED_MODULE_9__.IRetroShell, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8__.ITranslator],
    optional: [_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__.IMainMenu, _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_7__.ISettingRegistry],
    activate: (app, retroShell, translator, menu, settingRegistry) => {
        const trans = translator.load('retrolab');
        const top = retroShell.top;
        const pluginId = topVisibility.id;
        app.commands.addCommand(CommandIDs.toggleTop, {
            label: trans.__('Show Header'),
            execute: () => {
                top.setHidden(top.isVisible);
                if (settingRegistry) {
                    void settingRegistry.set(pluginId, 'visible', top.isVisible);
                }
            },
            isToggled: () => top.isVisible
        });
        if (menu) {
            menu.viewMenu.addGroup([{ command: CommandIDs.toggleTop }], 2);
        }
        let settingsOverride = false;
        if (settingRegistry) {
            const loadSettings = settingRegistry.load(pluginId);
            const updateSettings = (settings) => {
                const visible = settings.get('visible').composite;
                if (settings.user.visible !== undefined) {
                    settingsOverride = true;
                    top.setHidden(!visible);
                }
            };
            Promise.all([loadSettings, app.restored])
                .then(([settings]) => {
                updateSettings(settings);
                settings.changed.connect(settings => {
                    updateSettings(settings);
                });
            })
                .catch((reason) => {
                console.error(reason.message);
            });
        }
        const onChanged = () => {
            if (settingsOverride) {
                return;
            }
            if (app.format === 'desktop') {
                retroShell.expandTop();
            }
            else {
                retroShell.collapseTop();
            }
        };
        // listen on format change (mobile and desktop) to make the view more compact
        app.formatChanged.connect(onChanged);
    },
    autoStart: true
};
/**
 * The default tree route resolver plugin.
 */
const tree = {
    id: '@retrolab/application-extension:tree-resolver',
    autoStart: true,
    requires: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.IRouter],
    provides: _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.JupyterFrontEnd.ITreeResolver,
    activate: (app, router) => {
        const { commands } = app;
        const set = new _lumino_disposable__WEBPACK_IMPORTED_MODULE_12__.DisposableSet();
        const delegate = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_11__.PromiseDelegate();
        const treePattern = new RegExp('/retro(/tree/.*)?');
        set.add(commands.addCommand(CommandIDs.resolveTree, {
            execute: (async (args) => {
                var _a;
                if (set.isDisposed) {
                    return;
                }
                const query = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');
                const browser = query['file-browser-path'] || '';
                // Remove the file browser path from the query string.
                delete query['file-browser-path'];
                // Clean up artifacts immediately upon routing.
                set.dispose();
                delegate.resolve({ browser, file: _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getOption('treePath') });
            })
        }));
        set.add(router.register({ command: CommandIDs.resolveTree, pattern: treePattern }));
        // If a route is handled by the router without the tree command being
        // invoked, resolve to `null` and clean up artifacts.
        const listener = () => {
            if (set.isDisposed) {
                return;
            }
            set.dispose();
            delegate.resolve(null);
        };
        router.routed.connect(listener);
        set.add(new _lumino_disposable__WEBPACK_IMPORTED_MODULE_12__.DisposableDelegate(() => {
            router.routed.disconnect(listener);
        }));
        return { paths: delegate.promise };
    }
};
const treePathUpdater = {
    id: '@retrolab/application-extension:tree-updater',
    requires: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.IRouter],
    provides: _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ITreePathUpdater,
    activate: (app, router) => {
        function updateTreePath(treePath) {
            if (treePath !== _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getOption('treePath')) {
                const path = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.URLExt.join(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.getOption('baseUrl') || '/', 'retro', 'tree', _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.URLExt.encodeParts(treePath));
                router.navigate(path, { skipRouting: true });
                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.
                _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_3__.PageConfig.setOption('treePath', treePath);
            }
        }
        return updateTreePath;
    },
    autoStart: true
};
/**
 * Zen mode plugin
 */
const zen = {
    id: '@retrolab/application-extension:zen',
    autoStart: true,
    requires: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_8__.ITranslator],
    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.ICommandPalette, _retrolab_application__WEBPACK_IMPORTED_MODULE_9__.IRetroShell, _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__.IMainMenu],
    activate: (app, translator, palette, retroShell, menu) => {
        const { commands } = app;
        const elem = document.documentElement;
        const trans = translator.load('retrolab');
        const toggleOn = () => {
            retroShell === null || retroShell === void 0 ? void 0 : retroShell.collapseTop();
            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(true);
            zenModeEnabled = true;
        };
        const toggleOff = () => {
            retroShell === null || retroShell === void 0 ? void 0 : retroShell.expandTop();
            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(false);
            zenModeEnabled = false;
        };
        let zenModeEnabled = false;
        commands.addCommand(CommandIDs.toggleZen, {
            label: trans.__('Toggle Zen Mode'),
            execute: () => {
                if (!zenModeEnabled) {
                    elem.requestFullscreen();
                    toggleOn();
                }
                else {
                    document.exitFullscreen();
                    toggleOff();
                }
            }
        });
        document.addEventListener('fullscreenchange', () => {
            if (!document.fullscreenElement) {
                toggleOff();
            }
        });
        if (palette) {
            palette.addItem({ command: CommandIDs.toggleZen, category: 'Mode' });
        }
        if (menu) {
            menu.viewMenu.addGroup([{ command: CommandIDs.toggleZen }], 3);
        }
    }
};
/**
 * Export the plugins as default.
 */
const plugins = [
    dirty,
    logo,
    menus,
    opener,
    pages,
    paths,
    router,
    sessionDialogs,
    shell,
    spacer,
    status,
    tabTitle,
    title,
    topVisibility,
    tree,
    treePathUpdater,
    zen
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_retrolab_application-extension_lib_index_js.106adb4.js.map