{"version":3,"file":"packages_iframe-extension_lib_index_js.00ff04d.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACoD;AACX;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,iEAAe,UAAU,EAAC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/iframe-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The MIME type for IFrame.\n */\nconst MIME_TYPE = 'text/html-sandboxed';\n/**\n * A class for rendering an IFrame document.\n */\nexport class RenderedIFrame extends Widget {\n    constructor() {\n        super();\n        this.addClass('jp-IFrameContainer');\n        this._iframe = document.createElement('iframe');\n        this.node.appendChild(this._iframe);\n    }\n    /**\n     * Render the IFrame into this widget's node.\n     */\n    async renderModel(model) {\n        var _a, _b;\n        if (this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n        }\n        const ready = new PromiseDelegate();\n        this._iframe = document.createElement('iframe');\n        this._iframe.onload = () => {\n            ready.resolve(void 0);\n        };\n        this.node.appendChild(this._iframe);\n        await ready.promise;\n        const data = model.data[MIME_TYPE];\n        if (!data || !this._iframe.contentWindow) {\n            return;\n        }\n        const metadata = model.metadata[MIME_TYPE];\n        this._iframe.width = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.width) !== null && _a !== void 0 ? _a : '100%';\n        this._iframe.height = (_b = metadata === null || metadata === void 0 ? void 0 : metadata.height) !== null && _b !== void 0 ? _b : '400px';\n        this._iframe.contentWindow.document.write(data);\n    }\n    /**\n     * Dispose of the resources held by the iframe widget.\n     */\n    dispose() {\n        this._iframe.remove();\n        super.dispose();\n    }\n}\n/**\n * A mime renderer factory for IFrame data.\n */\nexport const rendererFactory = {\n    safe: false,\n    mimeTypes: [MIME_TYPE],\n    defaultRank: 100,\n    createRenderer: (options) => new RenderedIFrame(),\n};\nconst extensions = [\n    {\n        id: '@jupyterlite/iframe-extension:factory',\n        rendererFactory,\n        dataType: 'string',\n        documentWidgetFactoryOptions: {\n            name: 'IFrame',\n            primaryFileType: 'IFrame',\n            fileTypes: ['IFrame'],\n            defaultFor: ['IFrame'],\n        },\n    },\n];\nexport default extensions;\n"],"names":[],"sourceRoot":""}