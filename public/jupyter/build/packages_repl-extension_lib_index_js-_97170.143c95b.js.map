{"version":3,"file":"packages_repl-extension_lib_index_js-_97170.143c95b.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACwF;AACJ;AAC9B;AACA;AACsB;AACjB;AACL;AACb;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,gEAAe;AAC9B;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,kBAAkB,8DAAO;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT,8BAA8B,sEAAoB;AAClD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,kEAAW;AAC7B;AACA;AACA,aAAa;AACb,SAAS;AACT,kCAAkC,sEAAoB;AACtD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,sEAAoB;AACpD;AACA;AACA,SAAS;AACT;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA,sCAAsC,0EAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAM,GAAG,MAAM;AACjD,YAAY,wEAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAe,EAAE,+DAAa;AAC7C;AACA;AACA;AACA;AACA;AACA,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oBAAoB,gBAAgB;AACrF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAU;AACxB,eAAe,gEAAW;AAC1B;AACA,6BAA6B,qEAAe;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAsB;AACpC;AACA,6BAA6B,qEAAe;AAC5C,+BAA+B,UAAU;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4DAAO;AACrB,eAAe,2EAAsB;AACrC;AACA,gBAAgB,WAAW;AAC3B;AACA,2BAA2B,2DAAM,GAAG,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/repl-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabStatus, IRouter, JupyterFrontEnd, Router, } from '@jupyterlab/application';\nimport { CommandToolbarButton, IThemeManager, Toolbar } from '@jupyterlab/apputils';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { clearIcon, refreshIcon, runIcon } from '@jupyterlab/ui-components';\nimport { SingleWidgetApp } from '@jupyterlite/application';\nimport { liteIcon } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * A plugin to add buttons to the console toolbar.\n */\nconst buttons = {\n    id: '@jupyterlite/console-application:buttons',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [IConsoleTracker],\n    activate: (app, translator, tracker) => {\n        if (!tracker) {\n            return;\n        }\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        // wrapper commands to be able to override the icon\n        const runCommand = 'repl:run';\n        commands.addCommand(runCommand, {\n            caption: trans.__('Run'),\n            icon: runIcon,\n            execute: () => {\n                return commands.execute('console:run-forced');\n            },\n        });\n        const runButton = new CommandToolbarButton({\n            commands,\n            id: runCommand,\n        });\n        const restartCommand = 'repl:restart';\n        commands.addCommand(restartCommand, {\n            caption: trans.__('Restart'),\n            icon: refreshIcon,\n            execute: () => {\n                return commands.execute('console:restart-kernel');\n            },\n        });\n        const restartButton = new CommandToolbarButton({\n            commands,\n            id: restartCommand,\n        });\n        const clearCommand = 'repl:clear';\n        commands.addCommand(clearCommand, {\n            caption: trans.__('Clear'),\n            icon: clearIcon,\n            execute: () => {\n                return commands.execute('console:clear');\n            },\n        });\n        const clearButton = new CommandToolbarButton({\n            commands,\n            id: clearCommand,\n        });\n        tracker.widgetAdded.connect((_, console) => {\n            const { toolbar } = console;\n            console.toolbar.addItem('run', runButton);\n            console.toolbar.addItem('restart', restartButton);\n            console.toolbar.addItem('clear', clearButton);\n            toolbar.addItem('spacer', Toolbar.createSpacerItem());\n            const node = document.createElement('a');\n            node.title = trans.__('Powered by JupyterLite');\n            node.href = 'https://github.com/jupyterlite/jupyterlite';\n            node.target = '_blank';\n            node.rel = 'noopener noreferrer';\n            const poweredBy = new Widget({ node });\n            liteIcon.element({\n                container: node,\n                elementPosition: 'center',\n                margin: '2px 2px 2px 8px',\n                height: 'auto',\n                width: '16px',\n            });\n            poweredBy.addClass('jp-PoweredBy');\n            toolbar.insertAfter('spacer', 'powered-by', poweredBy);\n        });\n    },\n};\n/**\n * A plugin to open a code console and\n * parse custom parameters from the query string arguments.\n */\nconst consolePlugin = {\n    id: '@jupyterlite/repl-extension:console',\n    autoStart: true,\n    optional: [IConsoleTracker, IThemeManager],\n    activate: (app, tracker, themeManager) => {\n        var _a;\n        if (!tracker) {\n            return;\n        }\n        const { commands, serviceManager, started } = app;\n        const search = window.location.search;\n        const urlParams = new URLSearchParams(search);\n        const code = urlParams.getAll('code');\n        const kernel = urlParams.get('kernel') || undefined;\n        const theme = (_a = urlParams.get('theme')) === null || _a === void 0 ? void 0 : _a.trim();\n        const toolbar = urlParams.get('toolbar');\n        Promise.all([started, serviceManager.ready]).then(async () => {\n            commands.execute('console:create', { kernelPreference: { name: kernel } });\n        });\n        if (theme && themeManager) {\n            const themeName = decodeURIComponent(theme);\n            themeManager.setTheme(themeName);\n        }\n        tracker.widgetAdded.connect(async (_, widget) => {\n            const { console } = widget;\n            if (!toolbar) {\n                // hide the toolbar by default if not specified\n                widget.toolbar.dispose();\n            }\n            if (code) {\n                await console.sessionContext.ready;\n                code.forEach((line) => console.inject(line));\n            }\n        });\n    },\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlite/repl-extension:status',\n    autoStart: true,\n    provides: ILabStatus,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        if (!(app instanceof SingleWidgetApp)) {\n            const trans = translator.load(I18N_BUNDLE);\n            throw new Error(trans.__('%1 must be activated in SingleWidgetApp.', status.id));\n        }\n        return app.status;\n    },\n};\n/**\n * The default paths for a single widget app.\n */\nconst paths = {\n    id: '@jupyterlite/repl-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof SingleWidgetApp)) {\n            throw new Error(`${paths.id} must be activated in SingleWidgetApp.`);\n        }\n        return app.paths;\n    },\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlite/repl-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n};\nconst plugins = [\n    buttons,\n    consolePlugin,\n    paths,\n    router,\n    status,\n];\nexport default plugins;\n"],"names":[],"sourceRoot":""}