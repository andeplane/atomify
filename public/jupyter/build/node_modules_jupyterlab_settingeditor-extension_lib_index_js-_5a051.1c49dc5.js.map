{"version":3,"file":"node_modules_jupyterlab_settingeditor-extension_lib_index_js-_5a051.1c49dc5.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsE;AAC+C;AAC5D;AACsB;AAClB;AAC2C;AACzC;AAChB;AACO;AACuB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yEAAgB;AACxB,QAAQ,yDAAQ;AAChB,QAAQ,gEAAW;AACnB,QAAQ,6EAAsB;AAC9B,QAAQ,+DAAU;AAClB;AACA,eAAe,oEAAe,EAAE,iEAAe,EAAE,2FAAyB;AAC1E;AACA,cAAc,uFAAqB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA,wBAAwB,+DAAa;AACrC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB,QAAQ,4NAAmC;AAC5E,2BAA2B,gEAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,6CAA6C,0EAAwB;AACrE,2DAA2D,sEAAoB;AAC/E;AACA;AACA,sBAAsB,iEAAU;AAChC;AACA,aAAa;AACb;AACA;AACA,4BAA4B,mEAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAA8D;AAClG,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yEAAgB;AACxB,QAAQ,mEAAe;AACvB,QAAQ,yDAAQ;AAChB,QAAQ,uEAAmB;AAC3B,QAAQ,+DAAU;AAClB,QAAQ,gEAAW;AACnB;AACA,eAAe,oEAAe,EAAE,iEAAe;AAC/C;AACA,cAAc,2FAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA,wBAAwB,+DAAa;AACrC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB,QAAQ,4NAAmC;AACnF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,kCAAkC,gEAAc;AAChD;AACA,aAAa;AACb;AACA,mCAAmC,mEAAY;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,cAAc,+DAAQ;AACtB;AACA,2BAA2B,YAAY;AACvC,KAAK;AACL;AACA,yBAAyB,QAAQ,6FAA6F;AAC9H,cAAc,+DAAQ;AACtB;AACA,2BAA2B,YAAY;AACvC,KAAK;AACL;AACA;AACA,iEAAe,oBAAoB,EAAC;AACpC;;;;;;;;;;;;;;;;;AC7PA;AACA;AAC0C;AAC1C;AACA;AACA;AACA;AACO,kCAAkC,oDAAK;AAC9C;AACA;AACA;AACA;AACO,sCAAsC,oDAAK;AAClD","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/tokens.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module settingeditor-extension\n */\nimport { ILabStatus, ILayoutRestorer } from '@jupyterlab/application';\nimport { CommandToolbarButton, ICommandPalette, MainAreaWidget, Toolbar, WidgetTracker } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { IFormComponentRegistry, launchIcon } from '@jupyterlab/ui-components';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { IJSONSettingEditorTracker, ISettingEditorTracker } from '@jupyterlab/settingeditor/lib/tokens';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { saveIcon, settingsIcon, undoIcon } from '@jupyterlab/ui-components';\n/**\n * The command IDs used by the setting editor.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'settingeditor:open';\n    CommandIDs.openJSON = 'settingeditor:open-json';\n    CommandIDs.revert = 'settingeditor:revert';\n    CommandIDs.save = 'settingeditor:save';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default setting editor extension.\n */\nconst plugin = {\n    id: '@jupyterlab/settingeditor-extension:form-ui',\n    requires: [\n        ISettingRegistry,\n        IStateDB,\n        ITranslator,\n        IFormComponentRegistry,\n        ILabStatus\n    ],\n    optional: [ILayoutRestorer, ICommandPalette, IJSONSettingEditorTracker],\n    autoStart: true,\n    provides: ISettingEditorTracker,\n    activate\n};\n/**\n * Activate the setting editor extension.\n */\nfunction activate(app, registry, state, translator, editorRegistry, status, restorer, palette, jsonEditor) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const namespace = 'setting-editor';\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.open,\n            args: widget => ({}),\n            name: widget => namespace\n        });\n    }\n    const openUi = async (args) => {\n        if (tracker.currentWidget && !tracker.currentWidget.isDisposed) {\n            if (!tracker.currentWidget.isAttached) {\n                shell.add(tracker.currentWidget);\n            }\n            shell.activateById(tracker.currentWidget.id);\n            return;\n        }\n        const key = plugin.id;\n        const { SettingsEditor } = await import('@jupyterlab/settingeditor');\n        const editor = new MainAreaWidget({\n            content: new SettingsEditor({\n                editorRegistry,\n                key,\n                registry,\n                state,\n                commands,\n                toSkip: [\n                    '@jupyterlab/application-extension:context-menu',\n                    '@jupyterlab/mainmenu-extension:plugin'\n                ],\n                translator,\n                status,\n                query: args.query\n            })\n        });\n        if (jsonEditor) {\n            editor.toolbar.addItem('spacer', Toolbar.createSpacerItem());\n            editor.toolbar.addItem('open-json-editor', new CommandToolbarButton({\n                commands,\n                id: CommandIDs.openJSON,\n                icon: launchIcon,\n                label: trans.__('JSON Settings Editor')\n            }));\n        }\n        editor.id = namespace;\n        editor.title.icon = settingsIcon;\n        editor.title.label = trans.__('Settings');\n        editor.title.closable = true;\n        void tracker.add(editor);\n        shell.add(editor);\n    };\n    commands.addCommand(CommandIDs.open, {\n        execute: async (args) => {\n            void registry.load(plugin.id).then(settings => {\n                var _a, _b;\n                ((_a = args.settingEditorType) !== null && _a !== void 0 ? _a : settings.get('settingEditorType').composite ===\n                    'json') ? void commands.execute(CommandIDs.openJSON)\n                    : void openUi({ query: (_b = args.query) !== null && _b !== void 0 ? _b : '' });\n            });\n        },\n        label: args => {\n            if (args.label) {\n                return args.label;\n            }\n            return trans.__('Advanced Settings Editor');\n        }\n    });\n    if (palette) {\n        palette.addItem({\n            category: trans.__('Settings'),\n            command: CommandIDs.open,\n            args: { settingEditorType: 'ui' }\n        });\n    }\n    return tracker;\n}\n/**\n * The default setting editor extension.\n */\nconst jsonPlugin = {\n    id: '@jupyterlab/settingeditor-extension:plugin',\n    requires: [\n        ISettingRegistry,\n        IEditorServices,\n        IStateDB,\n        IRenderMimeRegistry,\n        ILabStatus,\n        ITranslator\n    ],\n    optional: [ILayoutRestorer, ICommandPalette],\n    autoStart: true,\n    provides: IJSONSettingEditorTracker,\n    activate: activateJSON\n};\n/**\n * Activate the setting editor extension.\n */\nfunction activateJSON(app, registry, editorServices, state, rendermime, status, translator, restorer, palette) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const namespace = 'json-setting-editor';\n    const factoryService = editorServices.factoryService;\n    const editorFactory = factoryService.newInlineEditor;\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.openJSON,\n            args: widget => ({}),\n            name: widget => namespace\n        });\n    }\n    commands.addCommand(CommandIDs.openJSON, {\n        execute: async () => {\n            if (tracker.currentWidget && !tracker.currentWidget.isDisposed) {\n                if (!tracker.currentWidget.isAttached) {\n                    shell.add(tracker.currentWidget);\n                }\n                shell.activateById(tracker.currentWidget.id);\n                return;\n            }\n            const key = plugin.id;\n            const when = app.restored;\n            const { JsonSettingEditor } = await import('@jupyterlab/settingeditor');\n            const editor = new JsonSettingEditor({\n                commands: {\n                    registry: commands,\n                    revert: CommandIDs.revert,\n                    save: CommandIDs.save\n                },\n                editorFactory,\n                key,\n                registry,\n                rendermime,\n                state,\n                translator,\n                when\n            });\n            let disposable = null;\n            // Notify the command registry when the visibility status of the setting\n            // editor's commands change. The setting editor toolbar listens for this\n            // signal from the command registry.\n            editor.commandsChanged.connect((sender, args) => {\n                args.forEach(id => {\n                    commands.notifyCommandChanged(id);\n                });\n                if (editor.canSaveRaw) {\n                    if (!disposable) {\n                        disposable = status.setDirty();\n                    }\n                }\n                else if (disposable) {\n                    disposable.dispose();\n                    disposable = null;\n                }\n                editor.disposed.connect(() => {\n                    if (disposable) {\n                        disposable.dispose();\n                    }\n                });\n            });\n            const container = new MainAreaWidget({\n                content: editor\n            });\n            container.id = namespace;\n            container.title.icon = settingsIcon;\n            container.title.label = trans.__('Advanced Settings Editor');\n            container.title.closable = true;\n            void tracker.add(container);\n            shell.add(container);\n        },\n        label: trans.__('Advanced JSON Settings Editor')\n    });\n    if (palette) {\n        palette.addItem({\n            category: trans.__('Settings'),\n            command: CommandIDs.openJSON\n        });\n    }\n    commands.addCommand(CommandIDs.revert, {\n        execute: () => {\n            var _a;\n            (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.revert();\n        },\n        icon: undoIcon,\n        label: trans.__('Revert User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canRevertRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    commands.addCommand(CommandIDs.save, {\n        execute: () => { var _a; return (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.save(); },\n        icon: saveIcon,\n        label: trans.__('Save User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canSaveRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    return tracker;\n}\nexport default [plugin, jsonPlugin];\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The setting editor tracker token.\n */\nexport const ISettingEditorTracker = new Token('@jupyterlab/settingeditor:ISettingEditorTracker');\n/* tslint:enable */\n/**\n * The setting editor tracker token.\n */\nexport const IJSONSettingEditorTracker = new Token('@jupyterlab/settingeditor:IJSONSettingEditorTracker');\n//# sourceMappingURL=tokens.js.map"],"names":[],"sourceRoot":""}