"use strict";
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["node_modules_retrolab_tree-extension_lib_index_js"],{

/***/ 26191:
/*!*************************************************************!*\
  !*** ../node_modules/@retrolab/tree-extension/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/apputils */ 62426);
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/filebrowser */ 93846);
/* harmony import */ var _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jupyterlab_running__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/running */ 60106);
/* harmony import */ var _jupyterlab_running__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_running__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/translation */ 89180);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/ui-components */ 74861);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lumino/widgets */ 60150);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_5__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.






/**
 * Plugin to add extra buttons to the file browser to create new notebooks and files
 */
const newFiles = {
    id: '@retrolab/tree-extension:buttons',
    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__.IFileBrowserFactory, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.ITranslator],
    autoStart: true,
    activate: (app, filebrowser, translator) => {
        const { commands } = app;
        const browser = filebrowser.defaultBrowser;
        const trans = translator.load('retrolab');
        // wrapper commands to be able to override the label
        const newNotebookCommand = 'tree:new-notebook';
        commands.addCommand(newNotebookCommand, {
            label: trans.__('New Notebook'),
            icon: _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4__.notebookIcon,
            execute: () => {
                return commands.execute('notebook:create-new');
            }
        });
        const newNotebook = new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.CommandToolbarButton({
            commands,
            id: newNotebookCommand
        });
        const newFile = new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.CommandToolbarButton({
            commands,
            id: 'filebrowser:create-new-file'
        });
        browser.toolbar.insertItem(0, 'new-notebook', newNotebook);
        browser.toolbar.insertItem(1, 'new-file', newFile);
    }
};
/**
 * Plugin to add a "New Console" button to the file browser toolbar.
 */
const newConsole = {
    id: '@retrolab/tree-extension:new-console',
    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__.IFileBrowserFactory, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.ITranslator],
    autoStart: true,
    activate: (app, filebrowser, translator) => {
        const { commands } = app;
        const browser = filebrowser.defaultBrowser;
        const trans = translator.load('retrolab');
        const newConsoleCommand = 'tree:new-console';
        commands.addCommand(newConsoleCommand, {
            label: trans.__('New Console'),
            icon: _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4__.consoleIcon,
            execute: () => {
                return commands.execute('console:create');
            }
        });
        const newConsole = new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.CommandToolbarButton({
            commands,
            id: newConsoleCommand
        });
        browser.toolbar.insertItem(2, 'new-console', newConsole);
    }
};
/**
 * Plugin to add a "New Terminal" button to the file browser toolbar.
 */
const newTerminal = {
    id: '@retrolab/tree-extension:new-terminal',
    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__.IFileBrowserFactory, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.ITranslator],
    autoStart: true,
    activate: (app, filebrowser, translator) => {
        const { commands } = app;
        const browser = filebrowser.defaultBrowser;
        const trans = translator.load('retrolab');
        const newTerminalCommand = 'tree:new-terminal';
        commands.addCommand(newTerminalCommand, {
            label: trans.__('New Terminal'),
            icon: _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4__.terminalIcon,
            execute: () => {
                return commands.execute('terminal:create-new');
            }
        });
        const newTerminal = new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.CommandToolbarButton({
            commands,
            id: newTerminalCommand
        });
        browser.toolbar.insertItem(3, 'new-terminal', newTerminal);
    }
};
/**
 * A plugin to add the default toolbar buttons from JupyterLab.
 * Note: this is not using the settings system because JupyterLab 3.4 does not include
 * this fix: https://github.com/jupyterlab/jupyterlab/pull/11938
 */
const defaultButtons = {
    id: '@retrolab/tree-extension:default-buttons',
    autoStart: true,
    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__.IFileBrowserFactory, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.ITranslator],
    activate: (app, filebrowser, translator) => {
        const { commands } = app;
        const browser = filebrowser.defaultBrowser;
        const model = browser.model;
        browser.toolbar.insertItem(4, 'new-directory', new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.CommandToolbarButton({
            commands,
            label: '',
            id: 'filebrowser:create-new-directory'
        }));
        browser.toolbar.insertItem(5, 'uploader', new _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__.Uploader({ model, translator }));
        browser.toolbar.insertItem(6, 'refresh', new _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_0__.CommandToolbarButton({
            commands,
            label: '',
            id: 'filebrowser:refresh'
        }));
    }
};
/**
 * A plugin to add the file browser widget to an ILabShell
 */
const browserWidget = {
    id: '@retrolab/tree-extension:widget',
    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_1__.IFileBrowserFactory, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.ITranslator],
    optional: [_jupyterlab_running__WEBPACK_IMPORTED_MODULE_2__.IRunningSessionManagers],
    autoStart: true,
    activate: (app, factory, translator, manager) => {
        const tabPanel = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_5__.TabPanel({ tabPlacement: 'top', tabsMovable: true });
        tabPanel.addClass('jp-TreePanel');
        const trans = translator.load('retrolab');
        const { defaultBrowser: browser } = factory;
        browser.title.label = trans.__('Files');
        browser.node.setAttribute('role', 'region');
        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));
        browser.title.icon = _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4__.folderIcon;
        tabPanel.addWidget(browser);
        tabPanel.tabBar.addTab(browser.title);
        if (manager) {
            const running = new _jupyterlab_running__WEBPACK_IMPORTED_MODULE_2__.RunningSessions(manager, translator);
            running.id = 'jp-running-sessions';
            running.title.label = trans.__('Running');
            running.title.icon = _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_4__.runningIcon;
            tabPanel.addWidget(running);
            tabPanel.tabBar.addTab(running.title);
        }
        app.shell.add(tabPanel, 'main', { rank: 100 });
    }
};
/**
 * Export the plugins as default.
 */
const plugins = [
    newFiles,
    newConsole,
    newTerminal,
    defaultButtons,
    browserWidget
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);


/***/ })

}]);
//# sourceMappingURL=node_modules_retrolab_tree-extension_lib_index_js.bbfe936.js.map