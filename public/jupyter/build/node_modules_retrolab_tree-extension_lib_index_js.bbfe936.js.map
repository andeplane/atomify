{"version":3,"file":"node_modules_retrolab_tree-extension_lib_index_js.bbfe936.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAC4D;AACY;AACO;AACzB;AACuD;AAClE;AAC3C;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,gEAAW;AAC/C;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAY;AAC9B;AACA;AACA;AACA,SAAS;AACT,gCAAgC,sEAAoB;AACpD;AACA;AACA,SAAS;AACT,4BAA4B,sEAAoB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,gEAAW;AAC/C;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAW;AAC7B;AACA;AACA;AACA,SAAS;AACT,+BAA+B,sEAAoB;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,gEAAW;AAC/C;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAY;AAC9B;AACA;AACA;AACA,SAAS;AACT,gCAAgC,sEAAoB;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,gEAAW;AAC/C;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA,2DAA2D,sEAAoB;AAC/E;AACA;AACA;AACA,SAAS;AACT,sDAAsD,6DAAQ,GAAG,mBAAmB;AACpF,qDAAqD,sEAAoB;AACzE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,gEAAW;AAC/C,eAAe,wEAAuB;AACtC;AACA;AACA,6BAA6B,qDAAQ,GAAG,wCAAwC;AAChF;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA,6BAA6B,iEAAU;AACvC;AACA;AACA;AACA,gCAAgC,gEAAe;AAC/C;AACA;AACA,iCAAiC,kEAAW;AAC5C;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/tree-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandToolbarButton } from '@jupyterlab/apputils';\nimport { IFileBrowserFactory, Uploader } from '@jupyterlab/filebrowser';\nimport { IRunningSessionManagers, RunningSessions } from '@jupyterlab/running';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { consoleIcon, folderIcon, notebookIcon, runningIcon, terminalIcon } from '@jupyterlab/ui-components';\nimport { TabPanel } from '@lumino/widgets';\n/**\n * Plugin to add extra buttons to the file browser to create new notebooks and files\n */\nconst newFiles = {\n    id: '@retrolab/tree-extension:buttons',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, filebrowser, translator) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        const trans = translator.load('retrolab');\n        // wrapper commands to be able to override the label\n        const newNotebookCommand = 'tree:new-notebook';\n        commands.addCommand(newNotebookCommand, {\n            label: trans.__('New Notebook'),\n            icon: notebookIcon,\n            execute: () => {\n                return commands.execute('notebook:create-new');\n            }\n        });\n        const newNotebook = new CommandToolbarButton({\n            commands,\n            id: newNotebookCommand\n        });\n        const newFile = new CommandToolbarButton({\n            commands,\n            id: 'filebrowser:create-new-file'\n        });\n        browser.toolbar.insertItem(0, 'new-notebook', newNotebook);\n        browser.toolbar.insertItem(1, 'new-file', newFile);\n    }\n};\n/**\n * Plugin to add a \"New Console\" button to the file browser toolbar.\n */\nconst newConsole = {\n    id: '@retrolab/tree-extension:new-console',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, filebrowser, translator) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        const trans = translator.load('retrolab');\n        const newConsoleCommand = 'tree:new-console';\n        commands.addCommand(newConsoleCommand, {\n            label: trans.__('New Console'),\n            icon: consoleIcon,\n            execute: () => {\n                return commands.execute('console:create');\n            }\n        });\n        const newConsole = new CommandToolbarButton({\n            commands,\n            id: newConsoleCommand\n        });\n        browser.toolbar.insertItem(2, 'new-console', newConsole);\n    }\n};\n/**\n * Plugin to add a \"New Terminal\" button to the file browser toolbar.\n */\nconst newTerminal = {\n    id: '@retrolab/tree-extension:new-terminal',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, filebrowser, translator) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        const trans = translator.load('retrolab');\n        const newTerminalCommand = 'tree:new-terminal';\n        commands.addCommand(newTerminalCommand, {\n            label: trans.__('New Terminal'),\n            icon: terminalIcon,\n            execute: () => {\n                return commands.execute('terminal:create-new');\n            }\n        });\n        const newTerminal = new CommandToolbarButton({\n            commands,\n            id: newTerminalCommand\n        });\n        browser.toolbar.insertItem(3, 'new-terminal', newTerminal);\n    }\n};\n/**\n * A plugin to add the default toolbar buttons from JupyterLab.\n * Note: this is not using the settings system because JupyterLab 3.4 does not include\n * this fix: https://github.com/jupyterlab/jupyterlab/pull/11938\n */\nconst defaultButtons = {\n    id: '@retrolab/tree-extension:default-buttons',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    activate: (app, filebrowser, translator) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        const model = browser.model;\n        browser.toolbar.insertItem(4, 'new-directory', new CommandToolbarButton({\n            commands,\n            label: '',\n            id: 'filebrowser:create-new-directory'\n        }));\n        browser.toolbar.insertItem(5, 'uploader', new Uploader({ model, translator }));\n        browser.toolbar.insertItem(6, 'refresh', new CommandToolbarButton({\n            commands,\n            label: '',\n            id: 'filebrowser:refresh'\n        }));\n    }\n};\n/**\n * A plugin to add the file browser widget to an ILabShell\n */\nconst browserWidget = {\n    id: '@retrolab/tree-extension:widget',\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [IRunningSessionManagers],\n    autoStart: true,\n    activate: (app, factory, translator, manager) => {\n        const tabPanel = new TabPanel({ tabPlacement: 'top', tabsMovable: true });\n        tabPanel.addClass('jp-TreePanel');\n        const trans = translator.load('retrolab');\n        const { defaultBrowser: browser } = factory;\n        browser.title.label = trans.__('Files');\n        browser.node.setAttribute('role', 'region');\n        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));\n        browser.title.icon = folderIcon;\n        tabPanel.addWidget(browser);\n        tabPanel.tabBar.addTab(browser.title);\n        if (manager) {\n            const running = new RunningSessions(manager, translator);\n            running.id = 'jp-running-sessions';\n            running.title.label = trans.__('Running');\n            running.title.icon = runningIcon;\n            tabPanel.addWidget(running);\n            tabPanel.tabBar.addTab(running.title);\n        }\n        app.shell.add(tabPanel, 'main', { rank: 100 });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    newFiles,\n    newConsole,\n    newTerminal,\n    defaultButtons,\n    browserWidget\n];\nexport default plugins;\n"],"names":[],"sourceRoot":""}