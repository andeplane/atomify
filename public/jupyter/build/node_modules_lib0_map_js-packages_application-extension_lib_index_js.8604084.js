"use strict";
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["node_modules_lib0_map_js-packages_application-extension_lib_index_js"],{

/***/ 22592:
/*!***********************************!*\
  !*** ../node_modules/lib0/map.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "all": () => (/* binding */ all),
/* harmony export */   "any": () => (/* binding */ any),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "create": () => (/* binding */ create),
/* harmony export */   "map": () => (/* binding */ map),
/* harmony export */   "setIfUndefined": () => (/* binding */ setIfUndefined)
/* harmony export */ });
/**
 * Utility module to work with key-value stores.
 *
 * @module map
 */

/**
 * Creates a new Map instance.
 *
 * @function
 * @return {Map<any, any>}
 *
 * @function
 */
const create = () => new Map()

/**
 * Copy a Map object into a fresh Map object.
 *
 * @function
 * @template X,Y
 * @param {Map<X,Y>} m
 * @return {Map<X,Y>}
 */
const copy = m => {
  const r = create()
  m.forEach((v, k) => { r.set(k, v) })
  return r
}

/**
 * Get map property. Create T if property is undefined and set T on map.
 *
 * ```js
 * const listeners = map.setIfUndefined(events, 'eventName', set.create)
 * listeners.add(listener)
 * ```
 *
 * @function
 * @template T,K
 * @param {Map<K, T>} map
 * @param {K} key
 * @param {function():T} createT
 * @return {T}
 */
const setIfUndefined = (map, key, createT) => {
  let set = map.get(key)
  if (set === undefined) {
    map.set(key, set = createT())
  }
  return set
}

/**
 * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.
 *
 * @function
 * @template K
 * @template V
 * @template R
 * @param {Map<K,V>} m
 * @param {function(V,K):R} f
 * @return {Array<R>}
 */
const map = (m, f) => {
  const res = []
  for (const [key, value] of m) {
    res.push(f(value, key))
  }
  return res
}

/**
 * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.
 *
 * @todo should rename to some - similarly to Array.some
 *
 * @function
 * @template K
 * @template V
 * @param {Map<K,V>} m
 * @param {function(V,K):boolean} f
 * @return {boolean}
 */
const any = (m, f) => {
  for (const [key, value] of m) {
    if (f(value, key)) {
      return true
    }
  }
  return false
}

/**
 * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.
 *
 * @function
 * @template K
 * @template V
 * @param {Map<K,V>} m
 * @param {function(V,K):boolean} f
 * @return {boolean}
 */
const all = (m, f) => {
  for (const [key, value] of m) {
    if (!f(value, key)) {
      return false
    }
  }
  return true
}


/***/ }),

/***/ 88579:
/*!******************************************************!*\
  !*** ../packages/application-extension/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/application */ 63109);
/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/apputils */ 94367);
/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/coreutils */ 27476);
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/docmanager */ 91857);
/* harmony import */ var _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _jupyterlab_docprovider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/docprovider */ 79864);
/* harmony import */ var _jupyterlab_docprovider__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_docprovider__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jupyterlab/filebrowser */ 90125);
/* harmony import */ var _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jupyterlab/mainmenu */ 27216);
/* harmony import */ var _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jupyterlab/translation */ 13790);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @jupyterlab/ui-components */ 6002);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _jupyterlite_ui_components__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @jupyterlite/ui-components */ 87729);
/* harmony import */ var _jupyterlite_ui_components__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_jupyterlite_ui_components__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _lumino_algorithm__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lumino/algorithm */ 43892);
/* harmony import */ var _lumino_algorithm__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_lumino_algorithm__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @lumino/widgets */ 60150);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var lib0_environment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lib0/environment */ 50903);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ 62471);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_12__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.














/**
 * The default notebook factory.
 */
const NOTEBOOK_FACTORY = 'Notebook';
/**
 * The editor factory.
 */
const EDITOR_FACTORY = 'Editor';
/**
 * A regular expression to match path to notebooks, documents and consoles
 */
const URL_PATTERN = new RegExp('/(lab|notebooks|edit|consoles)\\/?');
/**
 * The command IDs used by the application extension.
 */
var CommandIDs;
(function (CommandIDs) {
    CommandIDs.about = 'application:about';
    CommandIDs.docmanagerDownload = 'docmanager:download';
    CommandIDs.filebrowserDownload = 'filebrowser:download';
    CommandIDs.copyShareableLink = 'filebrowser:share-main';
})(CommandIDs || (CommandIDs = {}));
/**
 * The name of the translation bundle for internationalized strings.
 */
const I18N_BUNDLE = 'jupyterlite';
/**
 * Add a command to show an About dialog.
 */
const about = {
    id: '@jupyterlite/application-extension:about',
    autoStart: true,
    requires: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_7__.ITranslator],
    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.ICommandPalette, _jupyterlab_mainmenu__WEBPACK_IMPORTED_MODULE_6__.IMainMenu],
    activate: (app, translator, palette, menu) => {
        const { commands } = app;
        const trans = translator.load(I18N_BUNDLE);
        const category = trans.__('Help');
        commands.addCommand(CommandIDs.about, {
            label: trans.__('About %1', app.name),
            execute: () => {
                const versionNumber = trans.__('Version %1', app.version);
                const versionInfo = (react__WEBPACK_IMPORTED_MODULE_12___default().createElement("span", { className: "jp-About-version-info" },
                    react__WEBPACK_IMPORTED_MODULE_12___default().createElement("span", { className: "jp-About-version" }, versionNumber)));
                const title = (react__WEBPACK_IMPORTED_MODULE_12___default().createElement("span", { className: "jp-About-header" },
                    react__WEBPACK_IMPORTED_MODULE_12___default().createElement("div", { className: "jp-About-header-info" },
                        react__WEBPACK_IMPORTED_MODULE_12___default().createElement(_jupyterlite_ui_components__WEBPACK_IMPORTED_MODULE_9__.liteWordmark.react, { height: "auto", width: "196px" }),
                        versionInfo)));
                // Create the body of the about dialog
                const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';
                const contributorsURL = 'https://github.com/jupyterlite/jupyterlite/graphs/contributors';
                const externalLinks = (react__WEBPACK_IMPORTED_MODULE_12___default().createElement("span", { className: "jp-About-externalLinks" },
                    react__WEBPACK_IMPORTED_MODULE_12___default().createElement("a", { href: contributorsURL, target: "_blank", rel: "noopener noreferrer", className: "jp-Button-flat" }, trans.__('CONTRIBUTOR LIST')),
                    react__WEBPACK_IMPORTED_MODULE_12___default().createElement("a", { href: jupyterliteURL, target: "_blank", rel: "noopener noreferrer", className: "jp-Button-flat" }, trans.__('JUPYTERLITE ON GITHUB'))));
                const copyright = (react__WEBPACK_IMPORTED_MODULE_12___default().createElement("span", { className: "jp-About-copyright" }, trans.__('© 2021-2022 JupyterLite Contributors')));
                const body = (react__WEBPACK_IMPORTED_MODULE_12___default().createElement("div", { className: "jp-About-body" },
                    externalLinks,
                    copyright));
                return (0,_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.showDialog)({
                    title,
                    body,
                    buttons: [
                        _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.Dialog.createButton({
                            label: trans.__('Dismiss'),
                            className: 'jp-About-button jp-mod-reject jp-mod-styled',
                        }),
                    ],
                });
            },
        });
        if (palette) {
            palette.addItem({ command: CommandIDs.about, category });
        }
        if (menu) {
            menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);
        }
    },
};
/**
 * An alternative document provider plugin
 */
const docProviderPlugin = {
    id: '@jupyterlite/application-extension:docprovider',
    provides: _jupyterlab_docprovider__WEBPACK_IMPORTED_MODULE_4__.IDocumentProviderFactory,
    requires: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_7__.ITranslator],
    activate: (app, translator) => {
        const collaborative = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.PageConfig.getOption('collaborative') === 'true';
        const factory = (options) => {
            if (collaborative) {
                const trans = translator.load(I18N_BUNDLE);
                console.warn(trans.__('The `collaborative` feature was enabled, but no docprovider is available.'));
                console.info(trans.__('Install `jupyterlab-webrtc-docprovider` to enable WebRTC-based collaboration.'));
            }
            return new _jupyterlab_docprovider__WEBPACK_IMPORTED_MODULE_4__.ProviderMock();
        };
        return factory;
    },
};
/**
 * A plugin providing download commands in the file menu and command palette.
 */
const downloadPlugin = {
    id: '@jupyterlite/application-extension:download',
    autoStart: true,
    requires: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_7__.ITranslator, _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_3__.IDocumentManager],
    optional: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.ICommandPalette, _jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_5__.IFileBrowserFactory],
    activate: (app, translator, docManager, palette, factory) => {
        const trans = translator.load(I18N_BUNDLE);
        const { commands, serviceManager, shell } = app;
        const { contents } = serviceManager;
        const isEnabled = () => {
            const { currentWidget } = shell;
            return !!(currentWidget && docManager.contextForWidget(currentWidget));
        };
        const downloadContent = async (contentPath, fileName) => {
            var _a, _b, _c;
            const model = await contents.get(contentPath, { content: true });
            const element = document.createElement('a');
            if (model.type === 'notebook' || model.format === 'json') {
                const mime = (_a = model.mimetype) !== null && _a !== void 0 ? _a : 'text/json';
                const content = JSON.stringify(model.content, null, 2);
                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(content)}`;
            }
            else if (model.type === 'file') {
                if (model.format === 'base64') {
                    const mime = (_b = model.mimetype) !== null && _b !== void 0 ? _b : 'application/octet-stream';
                    element.href = `data:${mime};base64,${model.content}`;
                }
                else {
                    const mime = (_c = model.mimetype) !== null && _c !== void 0 ? _c : 'text/plain';
                    element.href = `data:${mime};charset=utf-8,${encodeURIComponent(model.content)}`;
                }
            }
            else {
                throw new Error(`Content whose type is "${model.type}" cannot be downloaded`);
            }
            element.download = fileName;
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        };
        commands.addCommand(CommandIDs.docmanagerDownload, {
            label: trans.__('Download'),
            caption: trans.__('Download the file to your computer'),
            isEnabled,
            execute: async () => {
                // Checks that shell.currentWidget is valid:
                const current = shell.currentWidget;
                if (!isEnabled() || !current) {
                    return;
                }
                const context = docManager.contextForWidget(current);
                if (!context) {
                    return (0,_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.showDialog)({
                        title: trans.__('Cannot Download'),
                        body: trans.__('No context found for current widget!'),
                        buttons: [_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.Dialog.okButton({ label: trans.__('OK') })],
                    });
                }
                await context.save();
                await downloadContent(context.path, context.path);
            },
        });
        const category = trans.__('File Operations');
        if (palette) {
            palette.addItem({ command: CommandIDs.docmanagerDownload, category });
        }
        if (factory) {
            const { tracker } = factory;
            commands.addCommand(CommandIDs.filebrowserDownload, {
                execute: async () => {
                    const widget = tracker.currentWidget;
                    if (!widget) {
                        return;
                    }
                    const selected = (0,_lumino_algorithm__WEBPACK_IMPORTED_MODULE_10__.toArray)(widget.selectedItems());
                    selected.forEach(async (item) => {
                        if (item.type === 'directory') {
                            return;
                        }
                        await downloadContent(item.path, item.name);
                    });
                },
                icon: _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_8__.downloadIcon.bindprops({ stylesheet: 'menuItem' }),
                label: trans.__('Download'),
            });
        }
    },
};
/**
 * The main application icon.
 */
const liteLogo = {
    id: '@jupyterlite/application-extension:logo',
    // marking as optional to not throw errors in retro
    optional: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ILabShell],
    autoStart: true,
    activate: (app, labShell) => {
        if (!labShell) {
            return;
        }
        const logo = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_11__.Widget();
        _jupyterlite_ui_components__WEBPACK_IMPORTED_MODULE_9__.liteIcon.element({
            container: logo.node,
            elementPosition: 'center',
            margin: '2px 2px 2px 8px',
            height: 'auto',
            width: '16px',
        });
        logo.id = 'jp-MainLogo';
        labShell.add(logo, 'top', { rank: 0 });
    },
};
/**
 * A plugin to trigger a refresh of the commands when the shell layout changes.
 */
const notifyCommands = {
    id: '@jupyterlite/application-extension:notify-commands',
    autoStart: true,
    optional: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ILabShell],
    activate: (app, labShell) => {
        if (labShell) {
            labShell.layoutModified.connect(() => {
                app.commands.notifyCommandChanged();
            });
        }
    },
};
/**
 * A custom opener plugin to pass the path to documents as
 * query string parameters.
 */
const opener = {
    id: '@jupyterlite/application-extension:opener',
    autoStart: true,
    requires: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.IRouter, _jupyterlab_docmanager__WEBPACK_IMPORTED_MODULE_3__.IDocumentManager],
    optional: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ILabShell],
    activate: (app, router, docManager, labShell) => {
        const { commands } = app;
        const command = 'router:tree';
        commands.addCommand(command, {
            execute: (args) => {
                var _a;
                const parsed = args;
                // use request to do the matching
                const { request, search } = parsed;
                const matches = (_a = request.match(URL_PATTERN)) !== null && _a !== void 0 ? _a : [];
                if (!matches) {
                    return;
                }
                const urlParams = new URLSearchParams(search);
                const paths = urlParams.getAll('path');
                if (!paths) {
                    return;
                }
                const files = paths.map((path) => decodeURIComponent(path));
                app.restored.then(() => {
                    const page = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.PageConfig.getOption('retroPage');
                    const [file] = files;
                    switch (page) {
                        case 'consoles': {
                            commands.execute('console:create', { path: file });
                            return;
                        }
                        case 'notebooks': {
                            docManager.open(file, NOTEBOOK_FACTORY, undefined, {
                                ref: '_noref',
                            });
                            return;
                        }
                        case 'edit': {
                            docManager.open(file, EDITOR_FACTORY, undefined, {
                                ref: '_noref',
                            });
                            return;
                        }
                        default: {
                            // open all files in the lab interface
                            files.forEach((file) => docManager.open(file));
                            const url = new URL(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.URLExt.join(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.PageConfig.getBaseUrl(), request));
                            // only remove the path (to keep extra parameters like the RTC room)
                            url.searchParams.delete('path');
                            const { pathname, search } = url;
                            router.navigate(`${pathname}${search}`, { skipRouting: true });
                            if (labShell) {
                                // open the folder where the files are located on startup
                                const showInBrowser = () => {
                                    commands.execute('docmanager:show-in-file-browser');
                                    labShell.currentChanged.disconnect(showInBrowser);
                                };
                                labShell.currentChanged.connect(showInBrowser);
                            }
                            break;
                        }
                    }
                });
            },
        });
        router.register({ command, pattern: URL_PATTERN });
    },
};
/**
 * A custom plugin to share a link to a file.
 *
 * This url can be used to open a particular file in JupyterLab.
 * It also adds the corresponding room if RTC is enabled.
 *
 */
const shareFile = {
    id: '@jupyterlite/application-extension:share-file',
    requires: [_jupyterlab_filebrowser__WEBPACK_IMPORTED_MODULE_5__.IFileBrowserFactory, _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_7__.ITranslator],
    autoStart: true,
    activate: (app, factory, translator) => {
        const trans = translator.load(I18N_BUNDLE);
        const { commands } = app;
        const { tracker } = factory;
        const roomName = (0,lib0_environment__WEBPACK_IMPORTED_MODULE_13__.getParam)('--room', '').trim();
        const collaborative = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.PageConfig.getOption('collaborative') === 'true' && roomName;
        commands.addCommand(CommandIDs.copyShareableLink, {
            execute: () => {
                const widget = tracker.currentWidget;
                if (!widget) {
                    return;
                }
                const url = new URL(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.URLExt.join(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_2__.PageConfig.getBaseUrl(), 'lab'));
                const models = (0,_lumino_algorithm__WEBPACK_IMPORTED_MODULE_10__.toArray)((0,_lumino_algorithm__WEBPACK_IMPORTED_MODULE_10__.filter)(widget.selectedItems(), (item) => item.type !== 'directory'));
                models.forEach((model) => {
                    url.searchParams.append('path', model.path);
                });
                if (collaborative) {
                    url.searchParams.append('room', roomName);
                }
                _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.Clipboard.copyToSystem(url.href);
            },
            isVisible: () => !!tracker.currentWidget &&
                (0,_lumino_algorithm__WEBPACK_IMPORTED_MODULE_10__.toArray)(tracker.currentWidget.selectedItems()).length >= 1,
            icon: _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_8__.linkIcon.bindprops({ stylesheet: 'menuItem' }),
            label: trans.__('Copy Shareable Link'),
        });
    },
};
const plugins = [
    about,
    docProviderPlugin,
    downloadPlugin,
    liteLogo,
    notifyCommands,
    opener,
    shareFile,
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);


/***/ })

}]);
//# sourceMappingURL=node_modules_lib0_map_js-packages_application-extension_lib_index_js.8604084.js.map