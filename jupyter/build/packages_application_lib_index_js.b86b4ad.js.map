{"version":3,"file":"packages_application_lib_index_js.b86b4ad.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACkC;AACE;;;;;;;;;;;;;;;;;;;;;;ACHpC;AACA;AAC0D;AAC0B;AACrB;AACZ;AACK;AACxD;AACA;AACA;AACO,8BAA8B,oEAAe;AACpD;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW,iEAAiB,IAAI;AAC5D;AACA;AACA;AACA,6EAA6E,iEAAiB;AAC9F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yEAAS;AACnC;AACA;AACA;AACA,6BAA6B,uEAAoB;AACjD;AACA,iCAAiC,kGAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uEAAoB;AAC1C,0BAA0B,uEAAoB;AAC9C,qBAAqB,uEAAoB;AACzC,wBAAwB,uEAAoB;AAC5C,0BAA0B,uEAAoB;AAC9C,wBAAwB,uEAAoB;AAC5C,qBAAqB,uEAAoB;AACzC,8BAA8B,uEAAoB;AAClD,yBAAyB,uEAAoB;AAC7C,2BAA2B,uEAAoB;AAC/C,yBAAyB,uEAAoB;AAC7C,+BAA+B,uEAAoB;AACnD,aAAa;AACb;AACA,6BAA6B,uEAAoB;AACjD,yBAAyB,uEAAoB;AAC7C,wBAAwB,uEAAoB;AAC5C,2BAA2B,uEAAoB;AAC/C,wBAAwB,uEAAoB;AAC5C,8BAA8B,uEAAoB;AAClD,4BAA4B,uEAAoB;AAChD,4BAA4B,uEAAoB;AAChD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC5GA;AACA;AAC+C;AACL;AACC;AACkB;AAC7D;AACA;AACA;AACO,+BAA+B,oDAAK;AAC3C;AACA;AACA;AACO,gCAAgC,mDAAM;AAC7C;AACA;AACA,mCAAmC,qDAAM;AACzC;AACA,+BAA+B,wDAAW;AAC1C,yBAAyB,kDAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAI;AAC3B;AACA,iDAAiD,KAAK;AACtD;AACA;AACA","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/singleWidgetApp.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/singleWidgetShell.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './singleWidgetApp';\nexport * from './singleWidgetShell';\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { createRendermimePlugins } from '@jupyterlab/application/lib/mimerenderers';\nimport { LabStatus } from '@jupyterlab/application/lib/status';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { SingleWidgetShell } from './singleWidgetShell';\n/**\n * App is the main application class. It is instantiated once and shared.\n */\nexport class SingleWidgetApp extends JupyterFrontEnd {\n    /**\n     * Construct a new SingleWidgetApp object.\n     *\n     * @param options The instantiation options for an application.\n     */\n    constructor(options = { shell: new SingleWidgetShell() }) {\n        var _a, _b;\n        super({\n            ...options,\n            shell: (_a = options.shell) !== null && _a !== void 0 ? _a : new SingleWidgetShell(),\n        });\n        /**\n         * The name of the application.\n         */\n        this.name = 'Single Widget Application';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the application.\n         */\n        this.version = (_b = PageConfig.getOption('appVersion')) !== null && _b !== void 0 ? _b : 'unknown';\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return {\n            urls: {\n                base: PageConfig.getOption('baseUrl'),\n                notFound: PageConfig.getOption('notFoundUrl'),\n                app: PageConfig.getOption('appUrl'),\n                static: PageConfig.getOption('staticUrl'),\n                settings: PageConfig.getOption('settingsUrl'),\n                themes: PageConfig.getOption('themesUrl'),\n                doc: PageConfig.getOption('docUrl'),\n                translations: PageConfig.getOption('translationsApiUrl'),\n                hubHost: PageConfig.getOption('hubHost') || undefined,\n                hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n                hubUser: PageConfig.getOption('hubUser') || undefined,\n                hubServerName: PageConfig.getOption('hubServerName') || undefined,\n            },\n            directories: {\n                appSettings: PageConfig.getOption('appSettingsDir'),\n                schemas: PageConfig.getOption('schemasDir'),\n                static: PageConfig.getOption('staticDir'),\n                templates: PageConfig.getOption('templatesDir'),\n                themes: PageConfig.getOption('themesDir'),\n                userSettings: PageConfig.getOption('userSettingsDir'),\n                serverRoot: PageConfig.getOption('serverRoot'),\n                workspaces: PageConfig.getOption('workspacesDir'),\n            },\n        };\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach((item) => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach((mod) => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { find, iter } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, Widget, PanelLayout } from '@lumino/widgets';\n/**\n * The single widget application shell token.\n */\nexport const ISingleWidgetShell = new Token('@jupyterlite/application:ISingleWidgetShell');\n/**\n * The application shell.\n */\nexport class SingleWidgetShell extends Widget {\n    constructor() {\n        super();\n        this._currentChanged = new Signal(this);\n        this.id = 'main';\n        const rootLayout = new PanelLayout();\n        this._main = new Panel();\n        this._main.id = 'single-widget-panel';\n        rootLayout.addWidget(this._main);\n        this.layout = rootLayout;\n    }\n    /**\n     * A signal emitted when the current widget changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        var _a;\n        return (_a = this._main.widgets[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        const widget = find(this.widgets('main'), (w) => w.id === id);\n        if (widget) {\n            widget.activate();\n        }\n    }\n    /**\n     * Add a widget to the application shell.\n     *\n     * @param widget - The widget being added.\n     *\n     * @param area - Optional region in the shell into which the widget should\n     * be added.\n     *\n     * @param options - Optional open options.\n     *\n     */\n    add(widget, area, options) {\n        if (area === 'main' || area === undefined) {\n            if (this._main.widgets.length > 0) {\n                // do not add the widget if there is already one\n                return;\n            }\n            this._main.addWidget(widget);\n            this._main.update();\n            this._currentChanged.emit(void 0);\n        }\n    }\n    /**\n     * Return the list of widgets for the given area.\n     *\n     * @param area The area\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return iter(this._main.widgets);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}