{"version":3,"file":"node_modules_jupyterlab_toc-extension_lib_index_js-_01611.c2827f6.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACqE;AACX;AACF;AACY;AACZ;AACK;AACE;AACkL;AAC3L;AACF;AACO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAe;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA,yBAAyB,oEAAQ;AACjC;AACA,qBAAqB,8DAAO;AAC5B;AACA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4DAAY;AAClD;AACA,4DAA4D,kBAAkB;AAC9E;AACA,wCAAwC,4DAAY;AACpD;AACA;AACA;AACA;AACA,wCAAwC,wDAAQ;AAChD,6BAA6B,gEAAgB;AAC7C;AACA;AACA;AACA;AACA,0CAA0C,wDAAQ;AAClD,yBAAyB,gEAAgB;AACzC;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,MAAM;AACnG;AACA;AACA;AACA;AACA,kCAAkC,wEAAuB;AACzD;AACA;AACA;AACA;AACA,kCAAkC,wEAAuB;AACzD;AACA;AACA,+BAA+B,qEAAoB;AACnD;AACA;AACA,gCAAgC,sEAAqB;AACrD;AACA;AACA;AACA;AACA,0CAA0C,gFAA+B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAwB;AACtC,eAAe,oEAAgB,EAAE,uEAAmB,EAAE,gEAAW;AACjE;AACA,QAAQ,kEAAc;AACtB,QAAQ,oEAAe;AACvB,QAAQ,8DAAS;AACjB,QAAQ,8EAAsB;AAC9B,QAAQ,kEAAgB;AACxB,QAAQ,yEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;AACzB","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module toc-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { IMarkdownViewerTracker } from '@jupyterlab/markdownviewer';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { createLatexGenerator, createMarkdownGenerator, createNotebookGenerator, createPythonGenerator, createRenderedMarkdownGenerator, ITableOfContentsRegistry, TableOfContentsRegistry as Registry, TableOfContents } from '@jupyterlab/toc';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { tocIcon } from '@jupyterlab/ui-components';\nimport { CodeCell, MarkdownCell } from '@jupyterlab/cells';\n/**\n * The command IDs used by TOC item.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.runCells = 'toc:run-cells';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Activates the ToC extension.\n *\n * @private\n * @param app - Jupyter application\n * @param docmanager - document manager\n * @param rendermime - rendered MIME registry\n * @param translator - translator\n * @param editorTracker - editor tracker\n * @param restorer - application layout restorer\n * @param labShell - Jupyter lab shell\n * @param markdownViewerTracker - Markdown viewer tracker\n * @param notebookTracker - notebook tracker\n * @param settingRegistry - setting registry\n * @returns table of contents registry\n */\nasync function activateTOC(app, docmanager, rendermime, translator, editorTracker, restorer, labShell, markdownViewerTracker, notebookTracker, settingRegistry) {\n    const trans = translator.load('jupyterlab');\n    // Create the ToC widget:\n    const toc = new TableOfContents({\n        docmanager,\n        rendermime,\n        translator\n    });\n    // Create the ToC registry:\n    const registry = new Registry();\n    // Add the ToC to the left area:\n    toc.title.icon = tocIcon;\n    toc.title.caption = trans.__('Table of Contents');\n    toc.id = 'table-of-contents';\n    toc.node.setAttribute('role', 'region');\n    toc.node.setAttribute('aria-label', trans.__('Table of Contents section'));\n    app.shell.add(toc, 'left', { rank: 400 });\n    app.commands.addCommand(CommandIDs.runCells, {\n        execute: args => {\n            if (!notebookTracker) {\n                return null;\n            }\n            const panel = notebookTracker.currentWidget;\n            if (panel == null) {\n                return;\n            }\n            const cells = panel.content.widgets;\n            if (cells === undefined) {\n                return;\n            }\n            const activeCell = toc.activeEntry.cellRef;\n            if (activeCell instanceof MarkdownCell) {\n                let level = activeCell.headingInfo.level;\n                for (let i = cells.indexOf(activeCell) + 1; i < cells.length; i++) {\n                    const cell = cells[i];\n                    if (cell instanceof MarkdownCell &&\n                        cell.headingInfo.level <= level &&\n                        cell.headingInfo.level > -1) {\n                        break;\n                    }\n                    if (cell instanceof CodeCell) {\n                        void CodeCell.execute(cell, panel.sessionContext);\n                    }\n                }\n            }\n            else {\n                if (activeCell instanceof CodeCell) {\n                    void CodeCell.execute(activeCell, panel.sessionContext);\n                }\n            }\n        },\n        label: trans.__('Run Cell(s)')\n    });\n    if (restorer) {\n        // Add the ToC widget to the application restorer:\n        restorer.add(toc, '@jupyterlab/toc:plugin');\n    }\n    // Attempt to load plugin settings:\n    let settings;\n    if (settingRegistry) {\n        try {\n            settings = await settingRegistry.load('@jupyterlab/toc-extension:plugin');\n        }\n        catch (error) {\n            console.error(`Failed to load settings for the Table of Contents extension.\\n\\n${error}`);\n        }\n    }\n    // Create a notebook generator:\n    if (notebookTracker) {\n        const notebookGenerator = createNotebookGenerator(notebookTracker, toc, rendermime.sanitizer, translator, settings);\n        registry.add(notebookGenerator);\n    }\n    // Create a Markdown generator:\n    if (editorTracker) {\n        const markdownGenerator = createMarkdownGenerator(editorTracker, toc, rendermime.sanitizer, translator, settings);\n        registry.add(markdownGenerator);\n        // Create a LaTeX generator:\n        const latexGenerator = createLatexGenerator(editorTracker);\n        registry.add(latexGenerator);\n        // Create a Python generator:\n        const pythonGenerator = createPythonGenerator(editorTracker);\n        registry.add(pythonGenerator);\n    }\n    // Create a rendered Markdown generator:\n    if (markdownViewerTracker) {\n        const renderedMarkdownGenerator = createRenderedMarkdownGenerator(markdownViewerTracker, toc, rendermime.sanitizer, translator, settings);\n        registry.add(renderedMarkdownGenerator);\n    }\n    // Update the ToC when the active widget changes:\n    if (labShell) {\n        labShell.currentChanged.connect(onConnect);\n    }\n    return registry;\n    /**\n     * Callback invoked when the active widget changes.\n     *\n     * @private\n     */\n    function onConnect() {\n        let widget = app.shell.currentWidget;\n        if (!widget) {\n            return;\n        }\n        let generator = registry.find(widget);\n        if (!generator) {\n            // If the previously used widget is still available, stick with it.\n            // Otherwise, set the current ToC widget to null.\n            if (toc.current && toc.current.widget.isDisposed) {\n                toc.current = null;\n            }\n            return;\n        }\n        toc.current = { widget, generator };\n    }\n}\n/**\n * Initialization data for the ToC extension.\n *\n * @private\n */\nconst extension = {\n    id: '@jupyterlab/toc:plugin',\n    autoStart: true,\n    provides: ITableOfContentsRegistry,\n    requires: [IDocumentManager, IRenderMimeRegistry, ITranslator],\n    optional: [\n        IEditorTracker,\n        ILayoutRestorer,\n        ILabShell,\n        IMarkdownViewerTracker,\n        INotebookTracker,\n        ISettingRegistry\n    ],\n    activate: activateTOC\n};\n/**\n * Exports.\n */\nexport default extension;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}