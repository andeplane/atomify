{"version":3,"file":"node_modules_jupyterlab_javascript-extension_lib_index_js.b1461f5.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAC4D;AACrD;AACA;AACP;AACA;AACA;AACA;AACO,6CAA6C,sEAAkB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;AACzB","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/javascript-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module javascript-extension\n */\nimport { RenderedJavaScript } from '@jupyterlab/rendermime';\nexport const TEXT_JAVASCRIPT_MIMETYPE = 'text/javascript';\nexport const APPLICATION_JAVASCRIPT_MIMETYPE = 'application/javascript';\nfunction evalInContext(code, element, document, window) {\n    // eslint-disable-next-line\n    return eval(code);\n}\nexport class ExperimentalRenderedJavascript extends RenderedJavaScript {\n    render(model) {\n        const trans = this.translator.load('jupyterlab');\n        const renderJavascript = () => {\n            try {\n                const data = model.data[this.mimeType];\n                if (data) {\n                    evalInContext(data, this.node, document, window);\n                }\n                return Promise.resolve();\n            }\n            catch (error) {\n                return Promise.reject(error);\n            }\n        };\n        if (!model.trusted) {\n            // If output is not trusted or if arbitrary Javascript execution is not enabled, render an informative error message\n            const pre = document.createElement('pre');\n            pre.textContent = trans.__('Are you sure that you want to run arbitrary Javascript within your JupyterLab session?');\n            const button = document.createElement('button');\n            button.textContent = trans.__('Run');\n            this.node.appendChild(pre);\n            this.node.appendChild(button);\n            button.onclick = event => {\n                this.node.textContent = '';\n                void renderJavascript();\n            };\n            return Promise.resolve();\n        }\n        return renderJavascript();\n    }\n}\n/**\n * A mime renderer factory for text/javascript data.\n */\nexport const rendererFactory = {\n    safe: false,\n    mimeTypes: [TEXT_JAVASCRIPT_MIMETYPE, APPLICATION_JAVASCRIPT_MIMETYPE],\n    createRenderer: options => new ExperimentalRenderedJavascript(options)\n};\nconst extension = {\n    id: '@jupyterlab/javascript-extension:factory',\n    rendererFactory,\n    rank: 0,\n    dataType: 'string'\n};\nexport default extension;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}