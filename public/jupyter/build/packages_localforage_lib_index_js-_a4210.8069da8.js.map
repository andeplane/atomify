{"version":3,"file":"packages_localforage_lib_index_js-_a4210.8069da8.js","mappings":";;;;;;;;AAAA;AACA,IAAI,KAA4D;AAChE,IAAI,CACwC;AAC5C,CAAC,qBAAqB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;AC1PD;AACA;AACyB;AACA;;;;;;;;;;;;;;;;;;ACHzB;AACA;AACkE;AAClE;AACA;AACA;AACO;AACP,6CAA6C,wEAAmB;AAChE;;;;;;;;;;;;;;;;;;ACRA;AACA;AAC0C;AAC1C;AACA;AACA;AACO,yBAAyB,oDAAK","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/localforage-memoryStorageDriver/dist/localforage-memoryStorageDriver.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/localforage/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/localforage/lib/memory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/localforage/lib/tokens.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.memoryStorageDriver = factory());\n}(this, function () { 'use strict';\n\n    function getSerializerPromise(localForageInstance) {\n        if (getSerializerPromise.result) {\n            return getSerializerPromise.result;\n        }\n        if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {\n            Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));\n        }\n        getSerializerPromise.result = localForageInstance.getSerializer();\n        return getSerializerPromise.result;\n    }\n\n    function executeCallback(promise, callback) {\n        if (callback) {\n            promise.then(function (result) {\n                callback(null, result);\n            }, function (error) {\n                callback(error);\n            });\n        }\n    }\n\n    var storageRepository = {};\n\n    // Config the localStorage backend, using options set in the config.\n    function _initStorage(options) {\n        var self = this;\n\n        var dbInfo = {};\n        if (options) {\n            for (var i in options) {\n                dbInfo[i] = options[i];\n            }\n        }\n\n        var database = storageRepository[dbInfo.name] = storageRepository[dbInfo.name] || {};\n        var table = database[dbInfo.storeName] = database[dbInfo.storeName] || {};\n        dbInfo.db = table;\n\n        self._dbInfo = dbInfo;\n\n        return getSerializerPromise(self).then(function (serializer) {\n            dbInfo.serializer = serializer;\n        });\n    }\n\n    function clear(callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    delete db[key];\n                }\n            }\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function getItem(key, callback) {\n        var self = this;\n\n        // Cast the key to a string, as that's all we can set as a key.\n        if (typeof key !== 'string') {\n            console.warn(key + ' used as a key, but it is not a string.');\n            key = String(key);\n        }\n\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            var result = db[key];\n\n            if (result) {\n                result = self._dbInfo.serializer.deserialize(result);\n            }\n\n            return result;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function iterate(iterator, callback) {\n        var self = this;\n\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n\n            var iterationNumber = 1;\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    var value = db[key];\n\n                    if (value) {\n                        value = self._dbInfo.serializer.deserialize(value);\n                    }\n\n                    value = iterator(value, key, iterationNumber++);\n\n                    if (value !== void 0) {\n                        return value;\n                    }\n                }\n            }\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function key(n, callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            var result = null;\n            var index = 0;\n\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    if (n === index) {\n                        result = key;\n                        break;\n                    }\n                    index++;\n                }\n            }\n\n            return result;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function keys(callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            var keys = [];\n\n            for (var key in db) {\n                if (db.hasOwnProperty(key)) {\n                    keys.push(key);\n                }\n            }\n\n            return keys;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function length(callback) {\n        var self = this;\n        var promise = self.keys().then(function (keys) {\n            return keys.length;\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function removeItem(key, callback) {\n        var self = this;\n\n        // Cast the key to a string, as that's all we can set as a key.\n        if (typeof key !== 'string') {\n            console.warn(key + ' used as a key, but it is not a string.');\n            key = String(key);\n        }\n\n        var promise = self.ready().then(function () {\n            var db = self._dbInfo.db;\n            if (db.hasOwnProperty(key)) {\n                delete db[key];\n            }\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    function setItem(key, value, callback) {\n        var self = this;\n\n        // Cast the key to a string, as that's all we can set as a key.\n        if (typeof key !== 'string') {\n            console.warn(key + ' used as a key, but it is not a string.');\n            key = String(key);\n        }\n\n        var promise = self.ready().then(function () {\n            // Convert undefined values to null.\n            // https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            function serializeAsync(value) {\n                return new Promise(function (resolve, reject) {\n                    self._dbInfo.serializer.serialize(value, function (value, error) {\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve(value);\n                        }\n                    });\n                });\n            }\n\n            return serializeAsync(value).then(function (value) {\n                var db = self._dbInfo.db;\n                db[key] = value;\n                return originalValue;\n            });\n        });\n\n        executeCallback(promise, callback);\n        return promise;\n    }\n\n    var memoryStorageDriver = {\n        _driver: 'memoryStorageDriver',\n        _initStorage: _initStorage,\n        // _supports: function() { return true; }\n        iterate: iterate,\n        getItem: getItem,\n        setItem: setItem,\n        removeItem: removeItem,\n        clear: clear,\n        length: length,\n        key: key,\n        keys: keys\n    };\n\n    return memoryStorageDriver;\n\n}));","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './tokens';\nexport * from './memory';\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport memoryStorageDriver from 'localforage-memoryStorageDriver';\n/**\n * Ensure a localforage singleton has had the memory storage driver installed\n */\nexport async function ensureMemoryStorage(theLocalforage) {\n    return await theLocalforage.defineDriver(memoryStorageDriver);\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The token for the localforage singleton.\n */\nexport const ILocalForage = new Token('@jupyterlite/localforge:ILocalForage');\n"],"names":[],"sourceRoot":""}