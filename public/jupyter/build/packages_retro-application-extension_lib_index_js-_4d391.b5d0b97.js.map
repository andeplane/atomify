{"version":3,"file":"packages_retro-application-extension_lib_index_js-_4d391.b5d0b97.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACsD;AACM;AACF;AACA;AACjB;AACW;AACpD;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAe;AAC9B;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA,oBAAoB,iBAAiB;AACrC,yBAAyB,uEAAoB;AAC7C;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,sBAAsB,KAAK;AAC9D;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAgB;AAC/B;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAe;AACvC;AACA,2BAA2B,QAAQ,QAAQ,MAAM,QAAQ,KAAK;AAC9D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,yBAAyB,mDAAM,GAAG,MAAM;AACxC,QAAQ,4EAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qCAAqC,SAAS;AAC9C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/retro-application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { liteWordmark } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { IRetroShell } from '@retrolab/application';\n/**\n * Open consoles in a new tab.\n */\nconst consoles = {\n    id: '@jupyterlite/retro-application-extension:consoles',\n    requires: [IConsoleTracker],\n    autoStart: true,\n    activate: (app, tracker) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        tracker.widgetAdded.connect(async (send, console) => {\n            const { sessionContext } = console;\n            const page = PageConfig.getOption('retroPage');\n            if (page === 'consoles') {\n                return;\n            }\n            const path = sessionContext.path;\n            window.open(`${baseUrl}retro/consoles?path=${path}`, '_blank');\n            // the widget is not needed anymore\n            console.dispose();\n        });\n    },\n};\n/**\n * A plugin to open document in a new browser tab.\n *\n * TODO: remove and use a custom doc manager?\n */\nconst docmanager = {\n    id: '@jupyterlite/retro-application-extension:docmanager',\n    requires: [IDocumentManager],\n    autoStart: true,\n    activate: (app, docManager) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        // patch the `docManager.open` option to prevent the default behavior\n        const docOpen = docManager.open;\n        docManager.open = (path, widgetName = 'default', kernel, options) => {\n            const ref = options === null || options === void 0 ? void 0 : options.ref;\n            if (ref === '_noref') {\n                docOpen.call(docManager, path, widgetName, kernel, options);\n                return;\n            }\n            const ext = PathExt.extname(path);\n            const route = ext === '.ipynb' ? 'notebooks' : 'edit';\n            window.open(`${baseUrl}retro/${route}?path=${path}`);\n            return undefined;\n        };\n    },\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@jupyterlite/retro-application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}retro/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        liteWordmark.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto',\n        });\n        logo.id = 'jp-RetroLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands = {\n    id: '@jupyterlite/retro-application-extension:notify-commands',\n    autoStart: true,\n    optional: [IRetroShell],\n    activate: (app, retroShell) => {\n        if (retroShell) {\n            retroShell.currentChanged.connect(() => {\n                requestAnimationFrame(() => {\n                    app.commands.notifyCommandChanged();\n                });\n            });\n        }\n    },\n};\nconst plugins = [\n    consoles,\n    docmanager,\n    logo,\n    notifyCommands,\n];\nexport default plugins;\n"],"names":[],"sourceRoot":""}