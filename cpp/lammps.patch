diff --git a/src/fix_ave_time.h b/src/fix_ave_time.h
--- a/src/fix_ave_time.h
+++ b/src/fix_ave_time.h
@@
   double compute_scalar() override;
   double compute_vector(int) override;
   double compute_array(int, int) override;
+
+  // ---- Atomify extensions ----
+  bigint nextvalid();                // expose original method publicly
+  int getmode()   { return mode; }
+  int getnvalues() { return nvalues; }
+  int getnrows()  { return nrows; }
+
+  // Accessors expected by Atomify UI
+  char **getids() {
+    static std::vector<char*> ids_buf;
+    ids_buf.clear();
+    ids_buf.reserve(values.size());
+    for (auto &v : values) ids_buf.push_back(const_cast<char*>(v.id.c_str()));
+    return ids_buf.data();
+  }
+
+  int *getwhich() {
+    static std::vector<int> which_buf;
+    which_buf.clear();
+    which_buf.reserve(values.size());
+    for (auto &v : values) which_buf.push_back(v.which);
+    return which_buf.data();
+  }
@@
-  void allocate_arrays();
-  bigint nextvalid();
+  void allocate_arrays();
 diff --git a/src/modify.cpp b/src/modify.cpp
--- a/src/modify.cpp
+++ b/src/modify.cpp
@@
-    {"GPU", "OMP", "INTEL", "property/atom", "cmap", "cmap3", "rx",
-     "deprecated", "STORE/KIM", "amoeba/pitorsion", "amoeba/bitorsion",
-     nullptr};
+    {"GPU", "OMP", "INTEL", "property/atom", "cmap", "cmap3", "rx",
+     "deprecated", "STORE/KIM", "amoeba/pitorsion", "amoeba/bitorsion", "atomify",
+     nullptr};
 diff --git a/src/info.cpp b/src/info.cpp
--- a/src/info.cpp
+++ b/src/info.cpp
@@
-  struct rusage ru;
-  if (getrusage(RUSAGE_SELF, &ru) == 0)
-    meminfo[2] = (double)ru.ru_maxrss/1024.0;
+  #if !defined(__EMSCRIPTEN__)
+  struct rusage ru;
+  if (getrusage(RUSAGE_SELF, &ru) == 0)
+    meminfo[2] = (double)ru.ru_maxrss/1024.0;
+  #endif
 diff --git a/src/platform.cpp b/src/platform.cpp
--- a/src/platform.cpp
+++ b/src/platform.cpp
@@
-  struct rusage ru;
-  if (getrusage(RUSAGE_SELF, &ru) == 0) {
-    rv = (double) ru.ru_utime.tv_sec;
-    rv += (double) ru.ru_utime.tv_usec * 0.000001;
-  }
+  #if !defined(__EMSCRIPTEN__)
+  struct rusage ru;
+  if (getrusage(RUSAGE_SELF, &ru) == 0) {
+    rv = (double) ru.ru_utime.tv_sec;
+    rv += (double) ru.ru_utime.tv_usec * 0.000001;
+  }
+  #endif