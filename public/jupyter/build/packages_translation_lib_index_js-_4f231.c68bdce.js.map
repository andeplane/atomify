{"version":3,"file":"packages_translation_lib_index_js-_4f231.c68bdce.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAC8B;AACL;;;;;;;;;;;;;;;;;ACHiB;AAC1C;AACA;AACA;AACO,yBAAyB,oDAAK;;;;;;;;;;;;;;;;;ACJsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8DAAW,CAAC,wEAAqB,wBAAwB,OAAO;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,4BAA4B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA,0BAA0B,+CAA+C;AACzE,iBAAiB;AACjB;AACA;AACA;AACA;AACA","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/translation/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/translation/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/translation/lib/translation.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './translation';\nexport * from './tokens';\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const ITranslation = new Token('@jupyterlite/translation:ITranslation');\n","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\n/**\n * A fake locale to retrieve all the language packs.\n */\nconst ALL = 'all';\n/**\n * A class to handle requests to /api/translations\n */\nexport class Translation {\n    constructor() {\n        this._prevLocale = '';\n    }\n    /**\n     * Get the translation data for the given locale\n     * @param locale The locale\n     * @returns\n     */\n    async get(locale) {\n        const apiURL = URLExt.join(PageConfig.getBaseUrl(), `api/translations/${locale}.json`);\n        try {\n            const response = await fetch(apiURL);\n            const json = JSON.parse(await response.text());\n            if (this._prevLocale !== ALL && locale === ALL) {\n                // TODO: fix this logic upstream?\n                // the upstream translation plugin relies on the comparison between\n                // the display name and the native name to enable or disable the commands:\n                // https://github.com/jupyterlab/jupyterlab/blob/befa831ffef36321b87f352a48fbe2439df6c872/packages/translation-extension/src/index.ts#L117\n                const prev = this._prevLocale;\n                json.data[prev].displayName = json.data[prev].nativeName;\n                if (prev !== 'en') {\n                    json.data['en'].displayName = `${json.data['en'].nativeName} (default)`;\n                }\n            }\n            this._prevLocale = locale;\n            return json;\n        }\n        catch (e) {\n            if (locale) {\n                return {\n                    data: {},\n                    message: `Language pack '${locale}' not installed!`,\n                };\n            }\n            return {\n                data: {\n                    en: { displayName: 'English', nativeName: 'English' },\n                },\n                message: '',\n            };\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}