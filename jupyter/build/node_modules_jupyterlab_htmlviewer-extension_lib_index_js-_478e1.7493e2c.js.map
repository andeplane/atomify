{"version":3,"file":"node_modules_jupyterlab_htmlviewer-extension_lib_index_js-_478e1.7493e2c.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0D;AAC0D;AACvB;AAC9B;AACT;AACA;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sEAAkB;AAChC,eAAe,gEAAW;AAC1B;AACA,QAAQ,iEAAe;AACvB,QAAQ,oEAAe;AACvB,QAAQ,yEAAgB;AACxB,QAAQ,wEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,oFAAgC;AACtG,oEAAoE,kFAA8B;AAClG;AACA,6BAA6B,0EAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gEAAS;AACvB;AACA;AACA;AACA,wBAAwB,qEAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,+DAAa;AACrC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+BAA+B,mDAAmD;AAClF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;AAC1B","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/htmlviewer-extension/lib/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module htmlviewer-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { createToolbarFactory, ICommandPalette, IToolbarWidgetRegistry, WidgetTracker } from '@jupyterlab/apputils';\nimport { HTMLViewerFactory, IHTMLViewerTracker, ToolbarItems } from '@jupyterlab/htmlviewer';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { html5Icon } from '@jupyterlab/ui-components';\n/**\n * Factory name\n */\nconst FACTORY = 'HTML Viewer';\n/**\n * Command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.trustHTML = 'htmlviewer:trust-html';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The HTML file handler extension.\n */\nconst htmlPlugin = {\n    activate: activateHTMLViewer,\n    id: '@jupyterlab/htmlviewer-extension:plugin',\n    provides: IHTMLViewerTracker,\n    requires: [ITranslator],\n    optional: [\n        ICommandPalette,\n        ILayoutRestorer,\n        ISettingRegistry,\n        IToolbarWidgetRegistry\n    ],\n    autoStart: true\n};\n/**\n * Activate the HTMLViewer extension.\n */\nfunction activateHTMLViewer(app, translator, palette, restorer, settingRegistry, toolbarRegistry) {\n    let toolbarFactory;\n    const trans = translator.load('jupyterlab');\n    if (toolbarRegistry) {\n        toolbarRegistry.registerFactory(FACTORY, 'refresh', widget => ToolbarItems.createRefreshButton(widget, translator));\n        toolbarRegistry.registerFactory(FACTORY, 'trust', widget => ToolbarItems.createTrustButton(widget, translator));\n        if (settingRegistry) {\n            toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY, htmlPlugin.id, translator);\n        }\n    }\n    // Add an HTML file type to the docregistry.\n    const ft = {\n        name: 'html',\n        contentType: 'file',\n        fileFormat: 'text',\n        displayName: trans.__('HTML File'),\n        extensions: ['.html'],\n        mimeTypes: ['text/html'],\n        icon: html5Icon\n    };\n    app.docRegistry.addFileType(ft);\n    // Create a new viewer factory.\n    const factory = new HTMLViewerFactory({\n        name: FACTORY,\n        fileTypes: ['html'],\n        defaultFor: ['html'],\n        readOnly: true,\n        toolbarFactory,\n        translator\n    });\n    // Create a widget tracker for HTML documents.\n    const tracker = new WidgetTracker({\n        namespace: 'htmlviewer'\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: 'HTML Viewer' }),\n            name: widget => widget.context.path\n        });\n    }\n    app.docRegistry.addWidgetFactory(factory);\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // Track the widget.\n        void tracker.add(widget);\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Notify the application when the trust state changes so it\n        // can update any renderings of the trust command.\n        widget.trustedChanged.connect(() => {\n            app.commands.notifyCommandChanged(CommandIDs.trustHTML);\n        });\n        widget.title.icon = ft.icon;\n        widget.title.iconClass = (_a = ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n    });\n    // Add a command to trust the active HTML document,\n    // allowing script executions in its context.\n    app.commands.addCommand(CommandIDs.trustHTML, {\n        label: trans.__('Trust HTML File'),\n        caption: trans.__(`Whether the HTML file is trusted.\n    Trusting the file allows scripts to run in it,\n    which may result in security risks.\n    Only enable for files you trust.`),\n        isEnabled: () => !!tracker.currentWidget,\n        isToggled: () => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return false;\n            }\n            const sandbox = current.content.sandbox;\n            return sandbox.indexOf('allow-scripts') !== -1;\n        },\n        execute: () => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return false;\n            }\n            current.trusted = !current.trusted;\n        }\n    });\n    if (palette) {\n        palette.addItem({\n            command: CommandIDs.trustHTML,\n            category: trans.__('File Operations')\n        });\n    }\n    return tracker;\n}\n/**\n * Export the plugins as default.\n */\nexport default htmlPlugin;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}