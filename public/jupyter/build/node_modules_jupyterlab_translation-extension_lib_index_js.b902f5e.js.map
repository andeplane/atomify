{"version":3,"file":"node_modules_jupyterlab_translation-extension_lib_index_js.b902f5e.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0D;AACA;AACT;AACc;AACmC;AAClG;AACA;AACA;AACO;AACP;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2EAAsB,EAAE,yEAAgB;AACvD,cAAc,gEAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uEAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,yEAAgB,EAAE,gEAAW;AACvD;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,+EAAsB,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC,6BAA6B,aAAa,IAAI,WAAW;AACzD;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAU;AAC7C;AACA;AACA;AACA,oCAAoC,qEAAmB,GAAG,2BAA2B;AACrF,oCAAoC,iEAAe,GAAG,sCAAsC;AAC5F;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA,6DAA6D,OAAO;AACpE,aAAa;AACb,SAAS;AACT;AACA,0FAA0F,OAAO;AACjG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;AACvB","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation-extension/lib/index.js"],"sourcesContent":["/* ----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module translation-extension\n */\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, requestTranslationsAPI, TranslationManager } from '@jupyterlab/translation';\n/**\n * A namespace for command IDs.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.installAdditionalLanguages = 'jupyterlab-translation:install-additional-languages';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Translation plugins\n */\nconst PLUGIN_ID = '@jupyterlab/translation-extension:plugin';\nconst translator = {\n    id: '@jupyterlab/translation:translator',\n    autoStart: true,\n    requires: [JupyterFrontEnd.IPaths, ISettingRegistry],\n    provides: ITranslator,\n    activate: async (app, paths, settings) => {\n        const setting = await settings.load(PLUGIN_ID);\n        const currentLocale = setting.get('locale').composite;\n        let stringsPrefix = setting.get('stringsPrefix')\n            .composite;\n        const displayStringsPrefix = setting.get('displayStringsPrefix')\n            .composite;\n        stringsPrefix = displayStringsPrefix ? stringsPrefix : '';\n        const serverSettings = app.serviceManager.serverSettings;\n        const translationManager = new TranslationManager(paths.urls.translations, stringsPrefix, serverSettings);\n        await translationManager.fetch(currentLocale);\n        return translationManager;\n    }\n};\n/**\n * Initialization data for the extension.\n */\nconst langMenu = {\n    id: PLUGIN_ID,\n    requires: [IMainMenu, ISettingRegistry, ITranslator],\n    autoStart: true,\n    activate: (app, mainMenu, settings, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        let currentLocale;\n        /**\n         * Load the settings for this extension\n         *\n         * @param setting Extension settings\n         */\n        function loadSetting(setting) {\n            // Read the settings and convert to the correct type\n            currentLocale = setting.get('locale').composite;\n        }\n        settings\n            .load(PLUGIN_ID)\n            .then(setting => {\n            var _a;\n            // Read the settings\n            loadSetting(setting);\n            document.documentElement.lang = currentLocale;\n            // Listen for your plugin setting changes using Signal\n            setting.changed.connect(loadSetting);\n            // Create a languages menu\n            const languagesMenu = (_a = mainMenu.settingsMenu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-settings-language';\n            })) === null || _a === void 0 ? void 0 : _a.submenu;\n            let command;\n            const serverSettings = app.serviceManager.serverSettings;\n            // Get list of available locales\n            requestTranslationsAPI('', '', {}, serverSettings)\n                .then(data => {\n                for (const locale in data['data']) {\n                    const value = data['data'][locale];\n                    const displayName = value.displayName;\n                    const nativeName = value.nativeName;\n                    const toggled = displayName === nativeName;\n                    const label = toggled\n                        ? `${displayName}`\n                        : `${displayName} - ${nativeName}`;\n                    // Add a command per language\n                    command = `jupyterlab-translation:${locale}`;\n                    commands.addCommand(command, {\n                        label: label,\n                        caption: label,\n                        isEnabled: () => !toggled,\n                        isVisible: () => true,\n                        isToggled: () => toggled,\n                        execute: () => {\n                            return showDialog({\n                                title: trans.__('Change interface language?'),\n                                body: trans.__('After changing the interface language to %1, you will need to reload JupyterLab to see the changes.', label),\n                                buttons: [\n                                    Dialog.cancelButton({ label: trans.__('Cancel') }),\n                                    Dialog.okButton({ label: trans.__('Change and reload') })\n                                ]\n                            }).then(result => {\n                                if (result.button.accept) {\n                                    setting\n                                        .set('locale', locale)\n                                        .then(() => {\n                                        window.location.reload();\n                                    })\n                                        .catch(reason => {\n                                        console.error(reason);\n                                    });\n                                }\n                            });\n                        }\n                    });\n                    // Add the language command to the menu\n                    if (languagesMenu) {\n                        languagesMenu.addItem({\n                            command,\n                            args: {}\n                        });\n                    }\n                }\n            })\n                .catch(reason => {\n                console.error(`Available locales errored!\\n${reason}`);\n            });\n        })\n            .catch(reason => {\n            console.error(`The jupyterlab translation extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [translator, langMenu];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}