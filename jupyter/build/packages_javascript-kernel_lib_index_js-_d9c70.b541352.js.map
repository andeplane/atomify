{"version":3,"file":"packages_javascript-kernel_lib_index_js-_d9c70.b541352.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACyB;;;;;;;;;;;;;;;;;;;ACFwB;AACG;AACpD;AACA;AACA;AACO,+BAA+B,2DAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF,0BAA0B,8DAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,+BAA+B,MAAM;AACrC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel/lib/kernel.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './kernel';\n","import { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class JavaScriptKernel extends BaseKernel {\n    /**\n     * Instantiate a new JavaScriptKernel\n     *\n     * @param options The instantiation options for a new JavaScriptKernel\n     */\n    constructor(options) {\n        super(options);\n        this._evalFunc = new Function('window', 'code', 'return window.eval(code);');\n        this._ready = new PromiseDelegate();\n        // create the main IFrame\n        this._iframe = document.createElement('iframe');\n        this._iframe.style.visibility = 'hidden';\n        this._iframe.style.position = 'absolute';\n        // position outside of the page\n        this._iframe.style.top = '-100000px';\n        this._iframe.onload = async () => {\n            await this._initIFrame();\n            this._ready.resolve();\n            window.addEventListener('message', (e) => {\n                const msg = e.data;\n                if (msg.event === 'stream') {\n                    const content = msg;\n                    this.stream(content);\n                }\n            });\n        };\n        document.body.appendChild(this._iframe);\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._iframe.remove();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'JavaScript',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript',\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'javascript',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017',\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A JavaScript kernel running in the browser',\n            help_links: [\n                {\n                    text: 'JavaScript Kernel',\n                    url: 'https://github.com/jupyterlite/jupyterlite',\n                },\n            ],\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        try {\n            const result = this._eval(code);\n            this.publishExecuteResult({\n                execution_count: this.executionCount,\n                data: {\n                    'text/plain': result,\n                },\n                metadata: {},\n            });\n            return {\n                status: 'ok',\n                execution_count: this.executionCount,\n                user_expressions: {},\n            };\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            this.publishExecuteError({\n                ename: name,\n                evalue: message,\n                traceback: [`${stack}`],\n            });\n            return {\n                status: 'error',\n                execution_count: this.executionCount,\n                ename: name,\n                evalue: message,\n                traceback: [`${stack}`],\n            };\n        }\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        var _a, _b;\n        // naive completion on window names only\n        // TODO: improve and move logic to the iframe\n        const vars = this._evalFunc(this._iframe.contentWindow, 'Object.keys(window)');\n        const { code, cursor_pos } = content;\n        const words = (_a = code.slice(0, cursor_pos).match(/(\\w+)$/)) !== null && _a !== void 0 ? _a : [];\n        const word = (_b = words[0]) !== null && _b !== void 0 ? _b : '';\n        const matches = vars.filter((v) => v.startsWith(word));\n        return {\n            matches,\n            cursor_start: cursor_pos - word.length,\n            cursor_end: cursor_pos,\n            metadata: {},\n            status: 'ok',\n        };\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    inputReply(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Execute code in the kernel IFrame.\n     *\n     * @param code The code to execute.\n     */\n    _eval(code) {\n        return this._evalFunc(this._iframe.contentWindow, code);\n    }\n    /**\n     * Create a new IFrame\n     *\n     * @param iframe The IFrame to initialize.\n     */\n    async _initIFrame() {\n        if (!this._iframe.contentWindow) {\n            return;\n        }\n        this._evalFunc(this._iframe.contentWindow, `\n        console._log = console.log;\n        console._error = console.error;\n\n        window._bubbleUp = function(msg) {\n          window.parent.postMessage(msg);\n        }\n\n        console.log = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stdout\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.info = console.log;\n\n        console.error = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stderr\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.warn = console.error;\n\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error(message);\n        }\n      `);\n    }\n}\n"],"names":[],"sourceRoot":""}